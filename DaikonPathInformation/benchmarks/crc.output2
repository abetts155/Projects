============================================================
0:00:00.020 - Start Program
============================================================

********** Analysing program 'crc' **********
Checking program configuration...
============================================================
0:00:00.030 - COMPILING BEGIN
============================================================

============================================================
0:00:00.060 - COMPILING END
============================================================

...all good
============================================================
0:00:00.070 - TRACE PARSING RUN #1 (NO INLINING)
============================================================

Parsing gem5 traces
==========> crc : header 15
int __count_11_12 = 0;
int __count_11_13 = 0;
int __count_15_11 = 0; //Loop counter
==========> crc : header 5
int __count_3_4 = 0;
int __count_5_3 = 0; //Loop counter
==========> crc : header 1
int __count_19 = 0;
int __count_1_6 = 0;
int __count_5_6 = 0;
int __count_7_10 = 0;
int __count_8_9 = 0;
int __count_8_10 = 0;
int __count_16_17 = 0;
int __count_16_18 = 0;
==========> icrc1 : header 25
int __count_21_22 = 0;
int __count_21_23 = 0;
int __count_25_21 = 0; //Loop counter
==========> icrc1 : header 20
int __count_26 = 0;
int __count_25_26 = 0;
****************************************************************************************************
FUNCTION 'crc'
****************************************************************************************************
  NEVER EXECUTES: (11, 12)
  ALWAYS EXECUTES: (11, 13), at least 40 time(s), at most 42 time(s)
  ALWAYS EXECUTES: (16, 17), at least 1 time(s), at most 1 time(s)
  NEVER EXECUTES: (16, 18)
  ALWAYS EXECUTES: 19, at least 1 time(s), at most 1 time(s)
  MAY EXECUTE: (1, 6), at most 1 time(s)
  MAY EXECUTE: (3, 4), at most 256 time(s)
  MAY EXECUTE: (5, 6), at most 1 time(s)
  ALWAYS EXECUTES: (7, 10), at least 1 time(s), at most 1 time(s)
  NEVER EXECUTES: (8, 9)
  NEVER EXECUTES: (8, 10)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
  MUTUALLY INCLUSIVE: 19 and (7, 10)
  MUTUALLY INCLUSIVE: (3, 4) and (5, 6)
  MUTUALLY INCLUSIVE: (11, 12) and (8, 9)
  MUTUALLY INCLUSIVE: (11, 12) and (8, 10)
  MUTUALLY INCLUSIVE: (11, 12) and (16, 18)
  MUTUALLY INCLUSIVE: (11, 13) and 19
  MUTUALLY INCLUSIVE: (11, 13) and (7, 10)
  MUTUALLY INCLUSIVE: (11, 13) and (16, 17)
  MUTUALLY INCLUSIVE: (16, 17) and 19
  MUTUALLY INCLUSIVE: (16, 17) and (7, 10)
  MUTUALLY INCLUSIVE: (16, 18) and (8, 9)
  MUTUALLY INCLUSIVE: (16, 18) and (8, 10)
  ONE-WAY DEPENDENCY: (1, 6) on 19
  ONE-WAY DEPENDENCY: (1, 6) on (7, 10)
  ONE-WAY DEPENDENCY: (1, 6) on (11, 13)
  ONE-WAY DEPENDENCY: (1, 6) on (16, 17)
  ONE-WAY DEPENDENCY: (3, 4) on 19
  ONE-WAY DEPENDENCY: (3, 4) on (7, 10)
  ONE-WAY DEPENDENCY: (3, 4) on (11, 13)
  ONE-WAY DEPENDENCY: (3, 4) on (16, 17)
  ONE-WAY DEPENDENCY: (5, 6) on 19
  ONE-WAY DEPENDENCY: (5, 6) on (7, 10)
  ONE-WAY DEPENDENCY: (5, 6) on (11, 13)
  ONE-WAY DEPENDENCY: (5, 6) on (16, 17)
  ONE-WAY DEPENDENCY: (8, 9) on 19
  ONE-WAY DEPENDENCY: (8, 9) on (1, 6)
  ONE-WAY DEPENDENCY: (8, 9) on (3, 4)
  ONE-WAY DEPENDENCY: (8, 9) on (5, 6)
  ONE-WAY DEPENDENCY: (8, 9) on (11, 13)
  ONE-WAY DEPENDENCY: (8, 9) on (16, 17)
  ONE-WAY DEPENDENCY: (8, 10) on 19
  ONE-WAY DEPENDENCY: (8, 10) on (1, 6)
  ONE-WAY DEPENDENCY: (8, 10) on (3, 4)
  ONE-WAY DEPENDENCY: (8, 10) on (5, 6)
  ONE-WAY DEPENDENCY: (8, 10) on (11, 13)
  ONE-WAY DEPENDENCY: (8, 10) on (16, 17)
  ONE-WAY DEPENDENCY: (11, 12) on 19
  ONE-WAY DEPENDENCY: (11, 12) on (1, 6)
  ONE-WAY DEPENDENCY: (11, 12) on (3, 4)
  ONE-WAY DEPENDENCY: (11, 12) on (5, 6)
  ONE-WAY DEPENDENCY: (11, 12) on (7, 10)
  ONE-WAY DEPENDENCY: (11, 12) on (11, 13)
  ONE-WAY DEPENDENCY: (11, 12) on (16, 17)
  ONE-WAY DEPENDENCY: (16, 18) on 19
  ONE-WAY DEPENDENCY: (16, 18) on (1, 6)
  ONE-WAY DEPENDENCY: (16, 18) on (3, 4)
  ONE-WAY DEPENDENCY: (16, 18) on (5, 6)
  ONE-WAY DEPENDENCY: (16, 18) on (7, 10)
  ONE-WAY DEPENDENCY: (16, 18) on (11, 13)
****************************************************************************************************
FUNCTION 'icrc1'
****************************************************************************************************
  MAY EXECUTE: (21, 22), at most 8 time(s)
  MAY EXECUTE: (21, 23), at most 8 time(s)
  ALWAYS EXECUTES: 26, at least 1 time(s), at most 1 time(s)
  ALWAYS EXECUTES: (25, 26), at least 1 time(s), at most 1 time(s)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
  MUTUALLY INCLUSIVE: 26 and (25, 26)
  ONE-WAY DEPENDENCY: (21, 22) on (25, 26)
  ONE-WAY DEPENDENCY: (21, 22) on 26
  ONE-WAY DEPENDENCY: (21, 23) on (25, 26)
  ONE-WAY DEPENDENCY: (21, 23) on 26
****************************************************************************************************
FUNCTION 'crc'
****************************************************************************************************
#ifdef CBMC
assert(__count_15_11  <= 43); // Loop counter property
assert(__count_5_3  <= 257); // Loop counter property
assert(__count_11_12 == 0); // Dead code
assert(__count_11_13 >= 40); // Lower capacity constraint
assert(__count_11_13 <= 42); // Upper capacity constraint
assert(__count_16_17 >= 1); // Lower capacity constraint
assert(__count_16_17 <= 1); // Upper capacity constraint
assert(__count_16_18 == 0); // Dead code
assert(__count_19 >= 1); // Lower capacity constraint
assert(__count_19 <= 1); // Upper capacity constraint
assert(__count_1_6 <= 1); // Upper capacity constraint
assert(__count_3_4 <= 256); // Upper capacity constraint
assert(__count_5_6 <= 1); // Upper capacity constraint
assert(__count_7_10 >= 1); // Lower capacity constraint
assert(__count_7_10 <= 1); // Upper capacity constraint
assert(__count_8_9 == 0); // Dead code
assert(__count_8_10 == 0); // Dead code
assert(__count_19 > 0 ==> __count_7_10 > 0); // Mutual inclusion
assert(__count_7_10 > 0 ==> __count_19 > 0); // Mutual inclusion
assert(__count_3_4 > 0 ==> __count_5_6 > 0); // Mutual inclusion
assert(__count_5_6 > 0 ==> __count_3_4 > 0); // Mutual inclusion
assert(__count_11_12 > 0 ==> __count_8_9 > 0); // Mutual inclusion
assert(__count_8_9 > 0 ==> __count_11_12 > 0); // Mutual inclusion
assert(__count_11_12 > 0 ==> __count_8_10 > 0); // Mutual inclusion
assert(__count_8_10 > 0 ==> __count_11_12 > 0); // Mutual inclusion
assert(__count_11_12 > 0 ==> __count_16_18 > 0); // Mutual inclusion
assert(__count_16_18 > 0 ==> __count_11_12 > 0); // Mutual inclusion
assert(__count_11_13 > 0 ==> __count_19 > 0); // Mutual inclusion
assert(__count_19 > 0 ==> __count_11_13 > 0); // Mutual inclusion
assert(__count_11_13 > 0 ==> __count_7_10 > 0); // Mutual inclusion
assert(__count_7_10 > 0 ==> __count_11_13 > 0); // Mutual inclusion
assert(__count_11_13 > 0 ==> __count_16_17 > 0); // Mutual inclusion
assert(__count_16_17 > 0 ==> __count_11_13 > 0); // Mutual inclusion
assert(__count_16_17 > 0 ==> __count_19 > 0); // Mutual inclusion
assert(__count_19 > 0 ==> __count_16_17 > 0); // Mutual inclusion
assert(__count_16_17 > 0 ==> __count_7_10 > 0); // Mutual inclusion
assert(__count_7_10 > 0 ==> __count_16_17 > 0); // Mutual inclusion
assert(__count_16_18 > 0 ==> __count_8_9 > 0); // Mutual inclusion
assert(__count_8_9 > 0 ==> __count_16_18 > 0); // Mutual inclusion
assert(__count_16_18 > 0 ==> __count_8_10 > 0); // Mutual inclusion
assert(__count_8_10 > 0 ==> __count_16_18 > 0); // Mutual inclusion
assert(__count_1_6 > 0 ==> __count_19 > 0); // Execution dependence
assert(__count_1_6 > 0 ==> __count_7_10 > 0); // Execution dependence
assert(__count_1_6 > 0 ==> __count_11_13 > 0); // Execution dependence
assert(__count_1_6 > 0 ==> __count_16_17 > 0); // Execution dependence
assert(__count_3_4 > 0 ==> __count_19 > 0); // Execution dependence
assert(__count_3_4 > 0 ==> __count_7_10 > 0); // Execution dependence
assert(__count_3_4 > 0 ==> __count_11_13 > 0); // Execution dependence
assert(__count_3_4 > 0 ==> __count_16_17 > 0); // Execution dependencFound a solution with cost -7620
Found no solution with cost -9240.0 .. -7621.0

Success, time = 0.0
Found a solution with cost -2510190

Success, time = 0.0
e
assert(__count_5_6 > 0 ==> __count_19 > 0); // Execution dependence
assert(__count_5_6 > 0 ==> __count_7_10 > 0); // Execution dependence
assert(__count_5_6 > 0 ==> __count_11_13 > 0); // Execution dependence
assert(__count_5_6 > 0 ==> __count_16_17 > 0); // Execution dependence
assert(__count_8_9 > 0 ==> __count_19 > 0); // Execution dependence
assert(__count_8_9 > 0 ==> __count_1_6 > 0); // Execution dependence
assert(__count_8_9 > 0 ==> __count_3_4 > 0); // Execution dependence
assert(__count_8_9 > 0 ==> __count_5_6 > 0); // Execution dependence
assert(__count_8_9 > 0 ==> __count_11_13 > 0); // Execution dependence
assert(__count_8_9 > 0 ==> __count_16_17 > 0); // Execution dependence
assert(__count_8_10 > 0 ==> __count_19 > 0); // Execution dependence
assert(__count_8_10 > 0 ==> __count_1_6 > 0); // Execution dependence
assert(__count_8_10 > 0 ==> __count_3_4 > 0); // Execution dependence
assert(__count_8_10 > 0 ==> __count_5_6 > 0); // Execution dependence
assert(__count_8_10 > 0 ==> __count_11_13 > 0); // Execution dependence
assert(__count_8_10 > 0 ==> __count_16_17 > 0); // Execution dependence
assert(__count_11_12 > 0 ==> __count_19 > 0); // Execution dependence
assert(__count_11_12 > 0 ==> __count_1_6 > 0); // Execution dependence
assert(__count_11_12 > 0 ==> __count_3_4 > 0); // Execution dependence
assert(__count_11_12 > 0 ==> __count_5_6 > 0); // Execution dependence
assert(__count_11_12 > 0 ==> __count_7_10 > 0); // Execution dependence
assert(__count_11_12 > 0 ==> __count_11_13 > 0); // Execution dependence
assert(__count_11_12 > 0 ==> __count_16_17 > 0); // Execution dependence
assert(__count_16_18 > 0 ==> __count_19 > 0); // Execution dependence
assert(__count_16_18 > 0 ==> __count_1_6 > 0); // Execution dependence
assert(__count_16_18 > 0 ==> __count_3_4 > 0); // Execution dependence
assert(__count_16_18 > 0 ==> __count_5_6 > 0); // Execution dependence
assert(__count_16_18 > 0 ==> __count_7_10 > 0); // Execution dependence
assert(__count_16_18 > 0 ==> __count_11_13 > 0); // Execution dependence
#endif
****************************************************************************************************
FUNCTION 'icrc1'
****************************************************************************************************
#ifdef CBMC
assert(__count_25_21  <= 9); // Loop counter property
assert(__count_21_22 <= 8); // Upper capacity constraint
assert(__count_21_23 <= 8); // Upper capacity constraint
assert(__count_26 >= 1); // Lower capacity constraint
assert(__count_26 <= 1); // Upper capacity constraint
assert(__count_25_26 >= 1); // Lower capacity constraint
assert(__count_25_26 <= 1); // Upper capacity constraint
assert(__count_26 > 0 ==> __count_25_26 > 0); // Mutual inclusion
assert(__count_25_26 > 0 ==> __count_26 > 0); // Mutual inclusion
assert(__count_21_22 > 0 ==> __count_25_26 > 0); // Execution dependence
assert(__count_21_22 > 0 ==> __count_26 > 0); // Execution dependence
assert(__count_21_23 > 0 ==> __count_25_26 > 0); // Execution dependence
assert(__count_21_23 > 0 ==> __count_26 > 0); // Execution dependence
#endif
HWMT = 2322750
Doing WCET calculation on icrc1
ILP(vanilla):: WCET(icrc1)=8430 (SOLVE TIME=0.00347)
Running command 'jeclipse -b /home/adam/WCET/DaikonPathInformation/benchmarks/crc.icrc1.context2.cfg.ecl.extra -e "solve(WCET)."'
CLP(extra):: WCET(icrc1)=7620 (SOLVE TIME=0.38690)
Doing WCET calculation on crc
ILP(vanilla):: WCET(crc)=2729460 (SOLVE TIME=0.00406)
Running command 'jeclipse -b /home/adam/WCET/DaikonPathInformation/benchmarks/crc.crc.context1.cfg.ecl.extra -e "solve(WCET)."'
CLP(extra):: WCET(crc)=2510190 (SOLVE TIME=0.42557)
In crc...
...#CFG edges              = 26
...#monitored              = 11
...#mutual exclusion pairs = 0
...#mutual inclusion pairs = 12
...#execution dependencies = 37
...#never execute          = 4
...#always execute         = 4
In icrc1...
...#CFG edges              = 9
...#monitored              = 4
...#mutual exclusion pairs = 0
...#mutual inclusion pairs = 1
...#execution dependencies = 4
...#never execute          = 0
...#always execute         = 2
...#TOTAL mutual exclusion pairs = 0
...#TOTAL mutual inclusion pairs = 13
...#TOTAL execution dependencies = 41
...#TOTAL never execute          = 6
...#TOTAL always execute         = 6
============================================================
0:40:43.290 - End Program
Elapsed time: 0:40:43.270
============================================================

