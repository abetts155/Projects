============================================================
0:00:00.020 - Start Program
============================================================

********** Analysing program 'quicksort' **********
Checking program configuration...
============================================================
0:00:00.030 - COMPILING BEGIN
============================================================

============================================================
0:00:00.050 - COMPILING END
============================================================

...all good
============================================================
0:00:00.060 - TRACE PARSING RUN #1 (NO INLINING)
============================================================

Parsing gem5 traces
==========> quicksort : header 10
int __count_11_9 = 0;
int __count_10_11 = 0; //Loop counter
==========> quicksort : header 6
int __count_6_10 = 0;
int __count_7_5 = 0;
int __count_7_8 = 0;
int __count_10_12 = 0;
int __count_11_12 = 0;
int __count_12_13 = 0;
int __count_16_18 = 0;
int __count_17_18 = 0;
int __count_6_10 = 0; //Loop counter
int __count_6_7 = 0; //Loop counter
==========> quicksort : header 20
int __count_14_19 = 0;
int __count_20_3 = 0; //Loop counter
==========> quicksort : header 1
int __count_23 = 0;
int __count_20_21 = 0;
int __count_22_23 = 0;
****************************************************************************************************
FUNCTION 'quicksort'
****************************************************************************************************
  ALWAYS EXECUTES: (7, 8), at least 327 time(s), at most 353 time(s)
  ALWAYS EXECUTES: (7, 5), at least 241 time(s), at most 516 time(s)
  ALWAYS EXECUTES: (10, 12), at least 156 time(s), at most 169 time(s)
  ALWAYS EXECUTES: (11, 9), at least 227 time(s), at most 500 time(s)
  ALWAYS EXECUTES: (11, 12), at least 164 time(s), at most 197 time(s)
  ALWAYS EXECUTES: (12, 13), at least 128 time(s), at most 154 time(s)
  ALWAYS EXECUTES: (14, 19), at least 100 time(s), at most 100 time(s)
  ALWAYS EXECUTES: (16, 18), at least 12 time(s), at most 31 time(s)
  ALWAYS EXECUTES: (17, 18), at least 68 time(s), at most 87 time(s)
  ALWAYS EXECUTES: (20, 21), at least 1 time(s), at most 1 time(s)
  NEVER EXECUTES: (22, 23)
  ALWAYS EXECUTES: 23, at least 1 time(s), at most 1 time(s)
  NEVER EXECUTES: (6, 10)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
  MUTUALLY INCLUSIVE: (7, 8) and 23
  MUTUALLY INCLUSIVE: (7, 8) and (7, 5)
  MUTUALLY INCLUSIVE: (7, 8) and (10, 12)
  MUTUALLY INCLUSIVE: (7, 8) and (11, 9)
  MUTUALLY INCLUSIVE: (7, 8) and (11, 12)
  MUTUALLY INCLUSIVE: (7, 8) and (12, 13)
  MUTUALLY INCLUSIVE: (7, 8) and (14, 19)
  MUTUALLY INCLUSIVE: (7, 8) and (16, 18)
  MUTUALLY INCLUSIVE: (7, 8) and (17, 18)
  MUTUALLY INCLUSIVE: (7, 8) and (20, 21)
  MUTUALLY INCLUSIVE: (7, 5) and 23
  MUTUALLY INCLUSIVE: (7, 5) and (10, 12)
  MUTUALLY INCLUSIVE: (7, 5) and (11, 9)
  MUTUALLY INCLUSIVE: (7, 5) and (11, 12)
  MUTUALLY INCLUSIVE: (7, 5) and (12, 13)
  MUTUALLY INCLUSIVE: (7, 5) and (14, 19)
  MUTUALLY INCLUSIVE: (7, 5) and (16, 18)
  MUTUALLY INCLUSIVE: (7, 5) and (17, 18)
  MUTUALLY INCLUSIVE: (7, 5) and (20, 21)
  MUTUALLY INCLUSIVE: (10, 12) and 23
  MUTUALLY INCLUSIVE: (10, 12) and (11, 9)
  MUTUALLY INCLUSIVE: (10, 12) and (11, 12)
  MUTUALLY INCLUSIVE: (10, 12) and (12, 13)
  MUTUALLY INCLUSIVE: (10, 12) and (14, 19)
  MUTUALLY INCLUSIVE: (10, 12) and (16, 18)
  MUTUALLY INCLUSIVE: (10, 12) and (17, 18)
  MUTUALLY INCLUSIVE: (10, 12) and (20, 21)
  MUTUALLY INCLUSIVE: (11, 9) and 23
  MUTUALLY INCLUSIVE: (11, 9) and (11, 12)
  MUTUALLY INCLUSIVE: (11, 9) and (12, 13)
  MUTUALLY INCLUSIVE: (11, 9) and (14, 19)
  MUTUALLY INCLUSIVE: (11, 9) and (16, 18)
  MUTUALLY INCLUSIVE: (11, 9) and (17, 18)
  MUTUALLY INCLUSIVE: (11, 9) and (20, 21)
  MUTUALLY INCLUSIVE: (11, 12) and 23
  MUTUALLY INCLUSIVE: (11, 12) and (12, 13)
  MUTUALLY INCLUSIVE: (11, 12) and (14, 19)
  MUTUALLY INCLUSIVE: (11, 12) and (16, 18)
  MUTUALLY INCLUSIVE: (11, 12) and (17, 18)
  MUTUALLY INCLUSIVE: (11, 12) and (20, 21)
  MUTUALLY INCLUSIVE: (12, 13) and 23
  MUTUALLY INCLUSIVE: (12, 13) and (14, 19)
  MUTUALLY INCLUSIVE: (12, 13) and (16, 18)
  MUTUALLY INCLUSIVE: (12, 13) and (17, 18)
  MUTUALLY INCLUSIVE: (12, 13) and (20, 21)
  MUTUALLY INCLUSIVE: (14, 19) and 23
  MUTUALLY INCLUSIVE: (14, 19) and (16, 18)
  MUTUALLY INCLUSIVE: (14, 19) and (17, 18)
  MUTUALLY INCLUSIVE: (14, 19) and (20, 21)
  MUTUALLY INCLUSIVE: (16, 18) and 23
  MUTUALLY INCLUSIVE: (16, 18) and (17, 18)
  MUTUALLY INCLUSIVE: (16, 18) and (20, 21)
  MUTUALLY INCLUSIVE: (17, 18) and 23
  MUTUALLY INCLUSIVE: (17, 18) and (20, 21)
  MUTUALLY INCLUSIVE: (20, 21) and 23
  ONE-WAY DEPENDENCY: (6, 10) on 23
  ONE-WAY DEPENDENCY: (6, 10) on (7, 8)
  ONE-WAY DEPENDENCY: (6, 10) on (7, 5)
  ONE-WAY DEPENDENCY: (6, 10) on (10, 12)
  ONE-WAY DEPENDENCY: (6, 10) on (11, 9)
  ONE-WAY DEPENDENCY: (6, 10) on (11, 12)
  ONE-WAY DEPENDENCY: (6, 10) on (12, 13)
  ONE-WAY DEPENDENCY: (6, 10) on (14, 19)
  ONE-WAY DEPENDENCY: (6, 10) on (16, 18)
  ONE-WAY DEPENDENCY: (6, 10) on (17, 18)
  ONE-WAY DEPENDENCY: (6, 10) on (20, 21)
  ONE-WAY DEPENDENCY: (22, 23) on 23
****************************************************************************************************
FUNCTION 'quicksort'
****************************************************************************************************
#ifdef CBMC
assert(__count_10_11  <= 60); // Loop counter property
assert(__count_6_10  + __count_6_7  +  <= 138); // Loop counter property
assert(__count_20_3  <= 101); // Loop counter property
assert(__count_7_8 >= 327); // Lower capacity constraint
assert(__count_7_8 <= 353); // Upper capacity constraint
assert(__count_7_5 >= 241); // Lower capacity constraint
assert(__count_7_5 <= 516); // Upper capacity constraint
assert(__count_10_12 >= 156); // Lower capacity constraint
assert(__count_10_12 <= 169); // Upper capacity constraint
assert(__count_11_9 >= 227); // Lower capacity constraint
assert(__count_11_9 <= 500); // Upper capacity constraint
assert(__count_11_12 >= 164); // Lower capacity constraint
assert(__count_11_12 <= 197); // Upper capacity constraint
assert(__count_12_13 >= 128); // Lower capacity constraint
assert(__count_12_13 <= 154); // Upper capacity constraint
assert(__count_14_19 >= 100); // Lower capacity constraint
assert(__count_14_19 <= 100); // Upper capacity constraint
assert(__count_16_18 >= 12); // Lower capacity constraint
assert(__count_16_18 <= 31); // Upper capacity constraint
assert(__count_17_18 >= 68); // Lower capacity constraint
assert(__count_17_18 <= 87); // Upper capacity constraint
assert(__count_20_21 >= 1); // Lower capacity constraint
assert(__count_20_21 <= 1); // Upper capacity constraint
assert(__count_22_23 == 0); // Dead code
assert(__count_23 >= 1); // Lower capacity constraint
assert(__count_23 <= 1); // Upper capacity constraint
assert(__count_6_10 == 0); // Dead code
assert(__count_7_8 > 0 ==> __count_23 > 0); // Mutual inclusion
assert(__count_23 > 0 ==> __count_7_8 > 0); // Mutual inclusion
assert(__count_7_8 > 0 ==> __count_7_5 > 0); // Mutual inclusion
assert(__count_7_5 > 0 ==> __count_7_8 > 0); // Mutual inclusion
assert(__count_7_8 > 0 ==> __count_10_12 > 0); // Mutual inclusion
assert(__count_10_12 > 0 ==> __count_7_8 > 0); // Mutual inclusion
assert(__count_7_8 > 0 ==> __count_11_9 > 0); // Mutual inclusion
assert(__count_11_9 > 0 ==> __count_7_8 > 0); // Mutual inclusion
assert(__count_7_8 > 0 ==> __count_11_12 > 0); // Mutual inclusion
assert(__count_11_12 > 0 ==> __count_7_8 > 0); // Mutual inclusion
assert(__count_7_8 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_7_8 > 0); // Mutual inclusion
assert(__count_7_8 > 0 ==> __count_14_19 > 0); // Mutual inclusion
assert(__count_14_19 > 0 ==> __count_7_8 > 0); // Mutual inclusion
assert(__count_7_8 > 0 ==> __count_16_18 > 0); // Mutual inclusion
assert(__count_16_18 > 0 ==> __count_7_8 > 0); // Mutual inclusion
assert(__count_7_8 > 0 ==> __count_17_18 > 0); // Mutual inclusion
assert(__count_17_18 > 0 ==> __count_7_8 > 0); // Mutual inclusion
assert(__count_7_8 > 0 ==> __count_20_21 > 0); // Mutual inclusion
assert(__count_20_21 > 0 ==> __count_7_8 > 0); // Mutual inclusion
assert(__count_7_5 > 0 ==> __count_23 > 0); // Mutual inclusion
assert(__count_23 > 0 ==> __count_7_5 > 0); // Mutual inclusion
assert(__count_7_5 > 0 ==> __count_10_12 > 0); // Mutual inclusion
assert(__count_10_12 > 0 ==> __count_7_5 > 0); // Mutual inclusion
assert(__count_7_5 > 0 ==> __count_11_9 > 0); // Mutual inclusion
assert(__count_11_9 > 0 ==> __count_7_5 > 0); // Mutual inclusion
assert(__count_7_5 > 0 ==> __count_11_12 > 0); // Mutual inclusion
assert(__count_11_12 > 0 ==> __count_7_5 > 0); // Mutual inclusion
assert(__count_7_5 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_7_5 > 0); // Mutual inclusion
assert(__count_7_5 > 0 ==> __count_14_19 > 0); // Mutual inclusion
assert(__count_14_19 > 0 ==> __count_7_5 > 0); // Mutual inclusion
assert(__count_7_5 > 0 ==> __count_16_18 > 0); // Mutual inclusion
assert(__count_16_18 > 0 ==> __count_7_5 > 0); // Mutual inclusion
assert(__count_7_5 > 0 ==> __count_17_18 > 0); // Mutual inclusion
assert(__count_17_18 > 0 ==> __count_7_5 > 0); // Mutual inclusion
assert(__count_7_5 > 0 ==> __count_20_21 > 0); // Mutual inclusion
assert(__count_20_21 > 0 ==> __count_7_5 > 0); // Mutual inclusion
assert(__count_10_12 > 0 ==> __count_23 > 0); // Mutual inclusion
assert(__count_23 > 0 ==> __count_10_12 > 0); // Mutual inclusion
assert(__count_10_12 > 0 ==> __count_11_9 > 0); // Mutual inclusion
assert(__count_11_9 > 0 ==> __count_10_12 > 0); // Mutual inclusion
assert(__count_10_12 > 0 ==> __count_11_12 > 0); // Mutual inclusion
assert(__count_11_12 > 0 ==> __count_10_12 > 0); // Mutual inclusion
assert(__count_10_12 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_10_12 > 0); // Mutual inclusion
assert(__count_10_12 > 0 ==> __count_14_19 > 0); // Mutual inclusion
assert(__count_14_19 > 0 ==> __count_10_12 > 0); // Mutual inclusion
assert(__count_10_12 > 0 ==> __count_16_18 > 0); // Mutual inclusion
assert(__count_16_18 > 0 ==> __count_10_12 > 0); // Mutual inclusion
assert(__count_10_12 > 0 ==> __count_17_18 > 0); // Mutual inclusion
assert(__count_17_18 > 0 ==> __count_10_12 > 0); // Mutual inclusion
assert(__count_10_12 > 0 ==> __count_20_21 > 0); // Mutual inclusion
assert(__count_20_21 > 0 ==> __count_10_12 > 0); // Mutual inclusion
assert(__count_11_9 > 0 ==> __count_23 > 0); // Mutual inclusion
assert(__count_23 > 0 ==> __count_11_9 > 0); // Mutual inclusion
assert(__count_11_9 > 0 ==> __count_11_12 > 0); // Mutual inclusion
assert(__count_11_12 > 0 ==> __count_11_9 > 0); // Mutual inclusion
assert(__count_11_9 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_11_9 > 0); // Mutual inclusion
assert(__count_11_9 > 0 ==> __count_14_19 > 0); // Mutual inclusion
assert(__count_14_19 > 0 ==> __count_11_9 > 0); // Mutual inclusion
assert(__count_11_9 > 0 ==> __count_16_18 > 0); // Mutual inclusion
assert(__count_16_18 > 0 ==> __count_11_9 > 0); // Mutual inclusion
assert(__count_11_9 > 0 ==> __count_17_18 > 0); // Mutual inclusion
assert(__count_17_18 > 0 ==> __count_11_9 > 0); // Mutual inclusion
assert(__count_11_9 > 0 ==> __count_20_21 > 0); // Mutual inclusion
assert(__count_20_21 > 0 ==> __count_11_9 > 0); // Mutual inclusion
assert(__count_11_12 > 0 ==> __count_23 > 0); // Mutual inclusion
assert(__count_23 > 0 ==> __count_11_12 > 0); // Mutual inclusion
assert(__count_11_12 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_11_12 > 0); // Mutual inclusion
assert(__count_11_12 > 0 ==> __count_14_19 > 0); // Mutual inclusion
assert(__count_14_19 > 0 ==> __count_11_12 > 0); // Mutual inclusion
assert(__count_11_12 > 0 ==> __count_16_18 > 0); // Mutual inclusion
assert(__count_16_18 > 0 ==> __count_11_12 > 0); // Mutual inclusion
assert(__count_11_12 > 0 ==> __count_17_18 > 0); // Mutual inclusion
assert(__count_17_18 > 0 ==> __count_11_12 > 0); // MFound a solution with cost -1997730
Found a solution with cost -1997910
Found a solution with cost -1998090
Found a solution with cost -1998270
Found a solution with cost -1998450
Found a solution with cost -1998630
Found a solution with cost -1998810
Found a solution with cost -1998990
Found a solution with cost -1999170
Found a solution with cost -1999350
Found a solution with cost -1999530
Found a solution with cost -1999710
Found a solution with cost -1999890
Found a solution with cost -2000070
Found a solution with cost -2000250
Found a solution with cost -2000430
Found a solution with cost -2000610
Found a solution with cost -2000790
Found a solution with cost -2000970
Found a solution with cost -2001150
Found a solution with cost -2001210
Found a solution with cost -2001390
Found a solution with cost -2001570
Found a solution with cost -2001750
Found a solution with cost -2001810
Found a solution with cost -2001990
Found a solution with cost -2002170
Found a solution with cost -2002350
Found a solution with cost -2002410
Found a solution with cost -2002590
Found a solution with cost -2002770
Found a solution with cost -2002950
Found a solution with cost -2003010
Found a solution with cost -2003190
Found a solution with cost -2003370
Found a solution with cost -2003550
Found a solution with cost -2003610
Found a solution with cost -2003790
Found a solution with cost -2003970
Found a solution with cost -2004150
Found a solution with cost -2004210
Found a solution with cost -2004390
Found a solution with cost -2004570
Found a solution with cost -2004750
Found a solution with cost -2004810
Found a solution with cost -2004990
Found a solution with cost -2005170
Found a solution with cost -2005350
Found a solution with cost -2005410
Found a solution with cost -2005590
Found a solution with cost -2005770
Found a solution with cost -2005950
Found a solution with cost -2006010
Found a solution with cost -2006190
Found a solution with cost -2006370
Found a solution with cost -2006550
Found a solution with cost -2006610
Found a solution with cost -2006790
Found a solution with cost -2006970
Found a solution with cost -2007150
Found a solution with cost -2007210
Found a solution with cost -2007390
Found a solution with cost -2007570
Found a solution with cost -2007750
Found a solution with cost -2007810
Found a solution with cost -2007990
Found a solution with cost -2008170
Found a solution with cost -2008350
Found a solution with cost -2008410
Found a solution with cost -2008590
Found a solution with cost -2008770
Found a solution with cost -2008950
Found a solution with cost -2009010
Found a solution with cost -2009190
Found a solution with cost -2009370
Found a solution with cost -2009550
Found a solution with cost -2009610
Found a solution with cost -2009790
Found a solution with cost -2009970
Found a solution with cost -2010150
Found a solution with cost -2010210
Found a solution with cost -2010390
Found a solution with cost -2010570
Found a solution with cost -2010750
Found a solution with cost -2010990
Found a solution with cost -2011170
Found a solution with cost -2011350
Found a solution with cost -2011770
Found a solution with cost -2011950
Found a solution with cost -2012550
Found no solution with cost -2060940.0 .. -2012551.0

Success, time = 3.71
utual inclusion
assert(__count_11_12 > 0 ==> __count_20_21 > 0); // Mutual inclusion
assert(__count_20_21 > 0 ==> __count_11_12 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_23 > 0); // Mutual inclusion
assert(__count_23 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_14_19 > 0); // Mutual inclusion
assert(__count_14_19 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_16_18 > 0); // Mutual inclusion
assert(__count_16_18 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_17_18 > 0); // Mutual inclusion
assert(__count_17_18 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_20_21 > 0); // Mutual inclusion
assert(__count_20_21 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_14_19 > 0 ==> __count_23 > 0); // Mutual inclusion
assert(__count_23 > 0 ==> __count_14_19 > 0); // Mutual inclusion
assert(__count_14_19 > 0 ==> __count_16_18 > 0); // Mutual inclusion
assert(__count_16_18 > 0 ==> __count_14_19 > 0); // Mutual inclusion
assert(__count_14_19 > 0 ==> __count_17_18 > 0); // Mutual inclusion
assert(__count_17_18 > 0 ==> __count_14_19 > 0); // Mutual inclusion
assert(__count_14_19 > 0 ==> __count_20_21 > 0); // Mutual inclusion
assert(__count_20_21 > 0 ==> __count_14_19 > 0); // Mutual inclusion
assert(__count_16_18 > 0 ==> __count_23 > 0); // Mutual inclusion
assert(__count_23 > 0 ==> __count_16_18 > 0); // Mutual inclusion
assert(__count_16_18 > 0 ==> __count_17_18 > 0); // Mutual inclusion
assert(__count_17_18 > 0 ==> __count_16_18 > 0); // Mutual inclusion
assert(__count_16_18 > 0 ==> __count_20_21 > 0); // Mutual inclusion
assert(__count_20_21 > 0 ==> __count_16_18 > 0); // Mutual inclusion
assert(__count_17_18 > 0 ==> __count_23 > 0); // Mutual inclusion
assert(__count_23 > 0 ==> __count_17_18 > 0); // Mutual inclusion
assert(__count_17_18 > 0 ==> __count_20_21 > 0); // Mutual inclusion
assert(__count_20_21 > 0 ==> __count_17_18 > 0); // Mutual inclusion
assert(__count_20_21 > 0 ==> __count_23 > 0); // Mutual inclusion
assert(__count_23 > 0 ==> __count_20_21 > 0); // Mutual inclusion
assert(__count_6_10 > 0 ==> __count_23 > 0); // Execution dependence
assert(__count_6_10 > 0 ==> __count_7_8 > 0); // Execution dependence
assert(__count_6_10 > 0 ==> __count_7_5 > 0); // Execution dependence
assert(__count_6_10 > 0 ==> __count_10_12 > 0); // Execution dependence
assert(__count_6_10 > 0 ==> __count_11_9 > 0); // Execution dependence
assert(__count_6_10 > 0 ==> __count_11_12 > 0); // Execution dependence
assert(__count_6_10 > 0 ==> __count_12_13 > 0); // Execution dependence
assert(__count_6_10 > 0 ==> __count_14_19 > 0); // Execution dependence
assert(__count_6_10 > 0 ==> __count_16_18 > 0); // Execution dependence
assert(__count_6_10 > 0 ==> __count_17_18 > 0); // Execution dependence
assert(__count_6_10 > 0 ==> __count_20_21 > 0); // Execution dependence
assert(__count_22_23 > 0 ==> __count_23 > 0); // Execution dependence
#endif
HWMT = 1930500
Doing WCET calculation on quicksort
ILP(vanilla):: WCET(quicksort)=852516000 (SOLVE TIME=0.00300)
Running command 'jeclipse -b /home/adam/WCET/DaikonPathInformation/benchmarks/quicksort.quicksort.context1.cfg.ecl.extra -e "solve(WCET)."'
CLP(extra):: WCET(quicksort)=2012550 (SOLVE TIME=4.03424)
In quicksort...
...#CFG edges              = 32
...#monitored              = 13
...#mutual exclusion pairs = 0
...#mutual inclusion pairs = 55
...#execution dependencies = 12
...#never execute          = 2
...#always execute         = 11
...#TOTAL mutual exclusion pairs = 0
...#TOTAL mutual inclusion pairs = 55
...#TOTAL execution dependencies = 12
...#TOTAL never execute          = 11
...#TOTAL always execute         = 11
============================================================
0:42:54.720 - End Program
Elapsed time: 0:42:54.700
============================================================

