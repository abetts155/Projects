============================================================
0:00:00.010 - Start Program
============================================================

********** Analysing program 'insertsort' **********
Checking program configuration...
============================================================
0:00:00.020 - COMPILING BEGIN
============================================================

============================================================
0:00:00.030 - COMPILING END
============================================================

...all good
============================================================
0:00:00.030 - TRACE PARSING RUN #1 (NO INLINING)
============================================================

Parsing gem5 traces
==========> insertsort : header 4
int __count_4_5 = 0;
int __count_4_5 = 0; //Loop counter
==========> insertsort : header 7
int __count_4_6 = 0;
int __count_5_6 = 0;
int __count_7_2 = 0; //Loop counter
==========> insertsort : header 1
int __count_8 = 0;
int __count_7_8 = 0;
****************************************************************************************************
FUNCTION 'insertsort'
****************************************************************************************************
  IGNORING MUTUAL INCLUSION: 8 and (4, 5)
  IGNORING MUTUAL INCLUSION: 8 and (4, 6)
  IGNORING MUTUAL INCLUSION: 8 and (7, 8)
  IGNORING MUTUAL INCLUSION: (4, 5) and (4, 6)
  IGNORING MUTUAL INCLUSION: (7, 8) and (4, 5)
  IGNORING MUTUAL INCLUSION: (7, 8) and (4, 6)
  IGNORING MUTUAL INCLUSION BECAUSE OF DEAD CODE: (5, 6) and (4, 5)
  IGNORING MUTUAL INCLUSION BECAUSE OF DEAD CODE: (5, 6) and (7, 8)
  IGNORING MUTUAL INCLUSION BECAUSE OF DEAD CODE: (5, 6) and (4, 6)
  IGNORING MUTUAL INCLUSION BECAUSE OF DEAD CODE: (5, 6) and 8
****************************************************************************************************
FUNCTION 'insertsort'
****************************************************************************************************
  ALWAYS EXECUTES: 8, at least 1 time(s), at most 1 time(s)
  ALWAYS EXECUTES: (7, 8), at least 1 time(s), at most 1 time(s)
  ALWAYS EXECUTES: (4, 5), at least 1979 time(s), at most 3385 time(s)
  ALWAYS EXECUTES: (4, 6), at least 99 time(s), at most 99 time(s)
  NEVER EXECUTES: (5, 6)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
****************************************************************************************************
FUNCTION 'insertsort'
****************************************************************************************************
#ifdef CBMC
assert(__count_4_5  <= 98); // Loop counter property
assert(__count_7_2  <= 100); // Loop counter property
assert(__count_8 >= 1); // Lower capacity constraint
assert(__count_8 <= 1); // Upper capacity constraint
assert(__count_7_8 >= 1); // Lower capacity constraint
assert(__count_7_8 <= 1); // Upper capacity constraint
assert(__count_4_5 >= 1979); // Lower capacity constraint
assert(__count_4_5 <= 3385); // Upper capacity constraint
assert(__count_4_6 >= 99); // Lower capacity constraint
assert(__count_4_6 <= 99); // Upper capacity constraint
assert(__count_5_6 == 0); // Dead code
#endif
HWMT = 4115760
Doing WCET calculation on insertsort
ILP(vanilla):: WCET(insertsort)=11622900 (SOLVE TIME=0.00250)
ILP(extra):: WCET(insertsort)=4115760 (SOLVE TIME=0.00208)
In insertsort...
...#CFG edges              = 11
...#monitored              = 5
...#mutual exclusion pairs = 0
...#mutual inclusion pairs = 0
...#execution dependencies = 0
...#never execute          = 1
...#always execute         = 4
...#TOTAL mutual exclusion pairs = 0
...#TOTAL mutual inclusion pairs = 0
...#TOTAL execution dependencies = 0
...#TOTAL never execute          = 4
...#TOTAL always execute         = 4
============================================================
0:49:48.080 - End Program
Elapsed time: 0:49:48.069
============================================================

