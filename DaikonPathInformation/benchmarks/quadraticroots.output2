============================================================
0:00:00.020 - Start Program
============================================================

********** Analysing program 'quadraticroots' **********
Checking program configuration...
============================================================
0:00:00.030 - COMPILING BEGIN
============================================================

============================================================
0:00:00.050 - COMPILING END
============================================================

...all good
============================================================
0:00:00.060 - TRACE PARSING RUN #1 (NO INLINING)
============================================================

Parsing gem5 traces
==========> sqrt : header 8
int __count_4_7 = 0;
int __count_5_6 = 0;
int __count_5_7 = 0;
int __count_8_4 = 0; //Loop counter
==========> sqrt : header 1
int __count_9 = 0;
int __count_2_9 = 0;
int __count_8_9 = 0;
==========> quadraticroots : header 10
int __count_18 = 0;
int __count_10_17 = 0;
int __count_12_13 = 0;
int __count_14_15 = 0;
int __count_16_18 = 0;
****************************************************************************************************
FUNCTION 'sqrt'
****************************************************************************************************
  ALWAYS EXECUTES: 9, at least 1 time(s), at most 1 time(s)
  NEVER EXECUTES: (2, 9)
  ALWAYS EXECUTES: (4, 7), at least 11 time(s), at most 15 time(s)
  ALWAYS EXECUTES: (5, 6), at least 1 time(s), at most 1 time(s)
  ALWAYS EXECUTES: (5, 7), at least 3 time(s), at most 7 time(s)
  ALWAYS EXECUTES: (8, 9), at least 1 time(s), at most 1 time(s)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
  MUTUALLY INCLUSIVE: 9 and (4, 7)
  MUTUALLY INCLUSIVE: 9 and (5, 6)
  MUTUALLY INCLUSIVE: 9 and (5, 7)
  MUTUALLY INCLUSIVE: 9 and (8, 9)
  MUTUALLY INCLUSIVE: (4, 7) and (5, 6)
  MUTUALLY INCLUSIVE: (4, 7) and (5, 7)
  MUTUALLY INCLUSIVE: (4, 7) and (8, 9)
  MUTUALLY INCLUSIVE: (5, 6) and (5, 7)
  MUTUALLY INCLUSIVE: (5, 6) and (8, 9)
  MUTUALLY INCLUSIVE: (5, 7) and (8, 9)
  ONE-WAY DEPENDENCY: (2, 9) on 9
****************************************************************************************************
FUNCTION 'quadraticroots'
****************************************************************************************************
  NEVER EXECUTES: (14, 15)
  NEVER EXECUTES: (10, 17)
  ALWAYS EXECUTES: 18, at least 1 time(s), at most 1 time(s)
  MAY EXECUTE: (16, 18), at most 1 time(s)
  MAY EXECUTE: (12, 13), at most 1 time(s)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
  ONE-WAY DEPENDENCY: (10, 17) on 18
  ONE-WAY DEPENDENCY: (12, 13) on 18
  ONE-WAY DEPENDENCY: (14, 15) on 18
  ONE-WAY DEPENDENCY: (16, 18) on 18
****************************************************************************************************
FUNCTION 'sqrt'
****************************************************************************************************
#ifdef CBMC
assert(__count_8_4  <= 20); // Loop counter property
assert(__count_9 >= 1); // Lower capacity constraint
assert(__count_9 <= 1); // Upper capacity constraint
assert(__count_2_9 == 0); // Dead code
assert(__count_4_7 >= 11); // Lower capacity constraint
assert(__count_4_7 <= 15); // Upper capacity constraint
assert(__count_5_6 >= 1); // Lower capacity constraint
assert(__count_5_6 <= 1); // Upper capacity constraint
assert(__count_5_7 >= 3); // Lower capacity constraint
assert(__count_5_7 <= 7); // Upper capacity constraint
assert(__count_8_9 >= 1); // Lower capacity constraint
assert(__count_8_9 <= 1); // Upper capacity constraint
assert(__count_9 > 0 ==> __count_4_7 > 0); // Mutual inclusion
assert(__count_4_7 > 0 ==> __count_9 > 0); // Mutual inclusion
assert(__count_9 > 0 ==> __count_5_6 > 0); // Mutual inclusion
assert(__count_5_6 > 0 ==> __count_9 > 0); // Mutual inclusion
assert(__count_9 > 0 ==> __count_Found a solution with cost -25980
Found no solution with cost -26160.0 .. -25981.0

Success, time = 0.01
Found a solution with cost -29910
Found a solution with cost -29940
Found no solution with cost -31530.0 .. -29941.0

Success, time = 0.0
5_7 > 0); // Mutual inclusion
assert(__count_5_7 > 0 ==> __count_9 > 0); // Mutual inclusion
assert(__count_9 > 0 ==> __count_8_9 > 0); // Mutual inclusion
assert(__count_8_9 > 0 ==> __count_9 > 0); // Mutual inclusion
assert(__count_4_7 > 0 ==> __count_5_6 > 0); // Mutual inclusion
assert(__count_5_6 > 0 ==> __count_4_7 > 0); // Mutual inclusion
assert(__count_4_7 > 0 ==> __count_5_7 > 0); // Mutual inclusion
assert(__count_5_7 > 0 ==> __count_4_7 > 0); // Mutual inclusion
assert(__count_4_7 > 0 ==> __count_8_9 > 0); // Mutual inclusion
assert(__count_8_9 > 0 ==> __count_4_7 > 0); // Mutual inclusion
assert(__count_5_6 > 0 ==> __count_5_7 > 0); // Mutual inclusion
assert(__count_5_7 > 0 ==> __count_5_6 > 0); // Mutual inclusion
assert(__count_5_6 > 0 ==> __count_8_9 > 0); // Mutual inclusion
assert(__count_8_9 > 0 ==> __count_5_6 > 0); // Mutual inclusion
assert(__count_5_7 > 0 ==> __count_8_9 > 0); // Mutual inclusion
assert(__count_8_9 > 0 ==> __count_5_7 > 0); // Mutual inclusion
assert(__count_2_9 > 0 ==> __count_9 > 0); // Execution dependence
#endif
****************************************************************************************************
FUNCTION 'quadraticroots'
****************************************************************************************************
#ifdef CBMC
assert(__count_14_15 == 0); // Dead code
assert(__count_10_17 == 0); // Dead code
assert(__count_18 >= 1); // Lower capacity constraint
assert(__count_18 <= 1); // Upper capacity constraint
assert(__count_16_18 <= 1); // Upper capacity constraint
assert(__count_12_13 <= 1); // Upper capacity constraint
assert(__count_10_17 > 0 ==> __count_18 > 0); // Execution dependence
assert(__count_12_13 > 0 ==> __count_18 > 0); // Execution dependence
assert(__count_14_15 > 0 ==> __count_18 > 0); // Execution dependence
assert(__count_16_18 > 0 ==> __count_18 > 0); // Execution dependence
#endif
HWMT = 29940
Doing WCET calculation on sqrt
ILP(vanilla):: WCET(sqrt)=53160 (SOLVE TIME=0.01863)
Running command 'jeclipse -b /home/adam/WCET/DaikonPathInformation/benchmarks/quadraticroots.sqrt.context2.cfg.ecl.extra -e "solve(WCET)."'
CLP(extra):: WCET(sqrt)=25980 (SOLVE TIME=0.97026)
Doing WCET calculation on quadraticroots
ILP(vanilla):: WCET(quadraticroots)=57120 (SOLVE TIME=0.00366)
Running command 'jeclipse -b /home/adam/WCET/DaikonPathInformation/benchmarks/quadraticroots.quadraticroots.context1.cfg.ecl.extra -e "solve(WCET)."'
CLP(extra):: WCET(quadraticroots)=29940 (SOLVE TIME=1.32330)
In sqrt...
...#CFG edges              = 13
...#monitored              = 6
...#mutual exclusion pairs = 0
...#mutual inclusion pairs = 10
...#execution dependencies = 1
...#never execute          = 1
...#always execute         = 5
In quadraticroots...
...#CFG edges              = 12
...#monitored              = 5
...#mutual exclusion pairs = 0
...#mutual inclusion pairs = 0
...#execution dependencies = 4
...#never execute          = 2
...#always execute         = 1
...#TOTAL mutual exclusion pairs = 0
...#TOTAL mutual inclusion pairs = 10
...#TOTAL execution dependencies = 5
...#TOTAL never execute          = 6
...#TOTAL always execute         = 6
============================================================
0:06:26.190 - End Program
Elapsed time: 0:06:26.170
============================================================

