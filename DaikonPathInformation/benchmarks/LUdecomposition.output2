============================================================
0:00:00.020 - Start Program
============================================================

********** Analysing program 'LUdecomposition' **********
Checking program configuration...
============================================================
0:00:00.030 - COMPILING BEGIN
============================================================

============================================================
0:00:00.080 - COMPILING END
============================================================

...all good
============================================================
0:00:00.090 - TRACE PARSING RUN #1 (NO INLINING)
============================================================

Parsing gem5 traces
==========> ludecomposition : header 18
int __count_18_17 = 0;
int __count_18_17 = 0; //Loop counter
==========> ludecomposition : header 12
int __count_12_11 = 0;
int __count_12_11 = 0; //Loop counter
==========> ludecomposition : header 32
int __count_32_31 = 0;
int __count_32_31 = 0; //Loop counter
==========> ludecomposition : header 26
int __count_26_25 = 0;
int __count_26_25 = 0; //Loop counter
==========> ludecomposition : header 20
int __count_18_19 = 0;
int __count_20_16 = 0; //Loop counter
==========> ludecomposition : header 14
int __count_9_13 = 0;
int __count_12_13 = 0;
int __count_14_9 = 0; //Loop counter
==========> ludecomposition : header 34
int __count_32_33 = 0;
int __count_34_30 = 0; //Loop counter
==========> ludecomposition : header 28
int __count_26_27 = 0;
int __count_28_24 = 0; //Loop counter
==========> ludecomposition : header 22
int __count_14_15 = 0;
int __count_22_5 = 0; //Loop counter
==========> ludecomposition : header 1
int __count_36 = 0;
int __count_1_3 = 0;
int __count_2_3 = 0;
int __count_6_7 = 0;
int __count_34_35 = 0;
==========> fabs : header 37
int __count_40 = 0;
int __count_37_38 = 0;
int __count_37_39 = 0;
****************************************************************************************************
FUNCTION 'ludecomposition'
****************************************************************************************************
  ALWAYS EXECUTES: 36, at least 1 time(s), at most 1 time(s)
  NEVER EXECUTES: (1, 3)
  NEVER EXECUTES: (2, 3)
  ALWAYS EXECUTES: (26, 27), at least 5 time(s), at most 5 time(s)
  ALWAYS EXECUTES: (26, 25), at least 15 time(s), at most 15 time(s)
  NEVER EXECUTES: (6, 7)
  ALWAYS EXECUTES: (32, 33), at least 5 time(s), at most 5 time(s)
  ALWAYS EXECUTES: (32, 31), at least 15 time(s), at most 15 time(s)
  ALWAYS EXECUTES: (9, 13), at least 5 time(s), at most 5 time(s)
  ALWAYS EXECUTES: (34, 35), at least 1 time(s), at most 1 time(s)
  ALWAYS EXECUTES: (12, 11), at least 20 time(s), at most 20 time(s)
  ALWAYS EXECUTES: (12, 13), at least 10 time(s), at most 10 time(s)
  ALWAYS EXECUTES: (14, 15), at least 5 time(s), at most 5 time(s)
  ALWAYS EXECUTES: (18, 17), at least 35 time(s), at most 35 time(s)
  ALWAYS EXECUTES: (18, 19), at least 15 time(s), at most 15 time(s)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
  MUTUALLY INCLUSIVE: 36 and (9, 13)
  MUTUALLY INCLUSIVE: 36 and (12, 11)
  MUTUALLY INCLUSIVE: 36 and (12, 13)
  MUTUALLY INCLUSIVE: 36 and (14, 15)
  MUTUALLY INCLUSIVE: 36 and (18, 17)
  MUTUALLY INCLUSIVE: 36 and (18, 19)
  MUTUALLY INCLUSIVE: 36 and (26, 25)
  MUTUALLY INCLUSIVE: 36 and (26, 27)
  MUTUALLY INCLUSIVE: 36 and (32, 33)
  MUTUALLY INCLUSIVE: 36 and (32, 31)
  MUTUALLY INCLUSIVE: 36 and (34, 35)
  MUTUALLY INCLUSIVE: (9, 13) and (12, 11)
  MUTUALLY INCLUSIVE: (9, 13) and (12, 13)
  MUTUALLY INCLUSIVE: (9, 13) and (14, 15)
  MUTUALLY INCLUSIVE: (9, 13) and (18, 17)
  MUTUALLY INCLUSIVE: (9, 13) and (18, 19)
  MUTUALLY INCLUSIVE: (9, 13) and (34, 35)
  MUTUALLY INCLUSIVE: (12, 11) and (12, 13)
  MUTUALLY INCLUSIVE: (12, 11) and (14, 15)
  MUTUALLY INCLUSIVE: (12, 11) and (18, 17)
  MUTUALLY INCLUSIVE: (12, 11) and (18, 19)
  MUTUALLY INCLUSIVE: (12, 13) and (14, 15)
  MUTUALLY INCLUSIVE: (12, 13) and (18, 17)
  MUTUALLY INCLUSIVE: (12, 13) and (18, 19)
  MUTUALLY INCLUSIVE: (14, 15) and (18, 17)
  MUTUALLY INCLUSIVE: (14, 15) and (18, 19)
  MUTUALLY INCLUSIVE: (18, 17) and (18, 19)
  MUTUALLY INCLUSIVE: (26, 25) and (9, 13)
  MUTUALLY INCLUSIVE: (26, 25) and (12, 11)
  MUTUALLY INCLUSIVE: (26, 25) and (12, 13)
  MUTUALLY INCLUSIVE: (26, 25) and (14, 15)
  MUTUALLY INCLUSIVE: (26, 25) and (18, 17)
  MUTUALLY INCLUSIVE: (26, 25) and (18, 19)
  MUTUALLY INCLUSIVE: (26, 25) and (32, 33)
  MUTUALLY INCLUSIVE: (26, 25) and (32, 31)
  MUTUALLY INCLUSIVE: (26, 25) and (34, 35)
  MUTUALLY INCLUSIVE: (26, 27) and (9, 13)
  MUTUALLY INCLUSIVE: (26, 27) and (12, 11)
  MUTUALLY INCLUSIVE: (26, 27) and (12, 13)
  MUTUALLY INCLUSIVE: (26, 27) and (14, 15)
  MUTUALLY INCLUSIVE: (26, 27) and (18, 17)
  MUTUALLY INCLUSIVE: (26, 27) and (18, 19)
  MUTUALLY INCLUSIVE: (26, 27) and (26, 25)
  MUTUALLY INCLUSIVE: (26, 27) and (32, 33)
  MUTUALLY INCLUSIVE: (26, 27) and (32, 31)
  MUTUALLY INCLUSIVE: (26, 27) and (34, 35)
  MUTUALLY INCLUSIVE: (32, 33) and (9, 13)
  MUTUALLY INCLUSIVE: (32, 33) and (12, 11)
  MUTUALLY INCLUSIVE: (32, 33) and (12, 13)
  MUTUALLY INCLUSIVE: (32, 33) and (14, 15)
  MUTUALLY INCLUSIVE: (32, 33) and (18, 17)
  MUTUALLY INCLUSIVE: (32, 33) and (18, 19)
  MUTUALLY INCLUSIVE: (32, 33) and (32, 31)
  MUTUALLY INCLUSIVE: (32, 33) and (34, 35)
  MUTUALLY INCLUSIVE: (32, 31) and (9, 13)
  MUTUALLY INCLUSIVE: (32, 31) and (12, 11)
  MUTUALLY INCLUSIVE: (32, 31) and (12, 13)
  MUTUALLY INCLUSIVE: (32, 31) and (14, 15)
  MUTUALLY INCLUSIVE: (32, 31) and (18, 17)
  MUTUALLY INCLUSIVE: (32, 31) and (18, 19)
  MUTUALLY INCLUSIVE: (32, 31) and (34, 35)
  MUTUALLY INCLUSIVE: (34, 35) and (12, 11)
  MUTUALLY INCLUSIVE: (34, 35) and (12, 13)
  MUTUALLY INCLUSIVE: (34, 35) and (14, 15)
  MUTUALLY INCLUSIVE: (34, 35) and (18, 17)
  MUTUALLY INCLUSIVE: (34, 35) and (18, 19)
  ONE-WAY DEPENDENCY: (1, 3) on 36
  ONE-WAY DEPENDENCY: (2, 3) on 36
  ONE-WAY DEPENDENCY: (6, 7) on 36
  ONE-WAY DEPENDENCY: (6, 7) on (9, 13)
  ONE-WAY DEPENDENCY: (6, 7) on (12, 11)
  ONE-WAY DEPENDENCY: (6, 7) on (12, 13)
  ONE-WAY DEPENDENCY: (6, 7) on (14, 15)
  ONE-WAY DEPENDENCY: (6, 7) on (18, 17)
  ONE-WAY DEPENDENCY: (6, 7) on (18, 19)
****************************************************************************************************
FUNCTION 'fabs'
****************************************************************************************************
  ALWAYS EXECUTES: 40, at least 1 time(s), at most 1 time(s)
  MAY EXECUTE: (37, 38), at most 1 time(s)
  MAY EXECUTE: (37, 39), at most 1 time(s)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
  ONE-WAY DEPENDENCY: (37, 38) on 40
  ONE-WAY DEPENDENCY: (37, 39) on 40
****************************************************************************************************
FUNCTION 'ludecomposition'
****************************************************************************************************
#ifdef CBMC
assert(__count_32_31  <= 6); // Loop counter property
assert(__count_34_30  <= 6); // Loop counter property
assert(__count_26_25  <= 6); // Loop counter property
assert(__count_28_24  <= 6); // Loop counter property
assert(__count_18_17  <= 6); // Loop counter property
assert(__count_20_16  <= 6); // Loop counter property
assert(__count_12_11  <= 5); // Loop counter property
assert(__count_14_9  <= 6); // Loop counter property
assert(__count_22_5  <= 6); // Loop counter property
assert(__count_36 >= 1); // Lower capacity constraint
assert(__count_36 <= 1); // Upper capacity constraint
assert(__count_1_3 == 0); // Dead code
assert(__count_2_3 == 0); // Dead code
assert(__count_26_27 >= 5); // Lower capacity constraint
assert(__count_26_27 <= 5); // Upper capacity constraint
assert(__count_26_25 >= 15); // Lower capacity constraint
assert(__count_26_25 <= 15); // Upper capacity constraint
assert(__count_6_7 == 0); // Dead code
assert(__count_32_33 >= 5); // Lower capacity constraint
assert(__count_32_33 <= 5); // Upper capacity constraint
assert(__count_32_31 >= 15); // Lower capacity constraint
assert(__count_32_31 <= 15); // Upper capacity constraint
assert(__count_9_13 >= 5); // Lower capacity constraint
assert(__count_9_13 <= 5); // Upper capacity constraint
assert(__count_34_35 >= 1); // Lower capacity constraint
assert(__count_34_35 <= 1); // Upper capacity constraint
assert(__count_12_11 >= 20); // Lower capacity constraint
assert(__count_12_11 <= 20); // Upper capacity constraint
assert(__count_12_13 >= 10); // Lower capacity constraint
assert(__count_12_13 <= 10); // Upper capacity constraint
assert(__count_14_15 >= 5); // Lower capacity constraint
assert(__count_14_15 <= 5); // Upper capacity constraint
assert(__count_18_17 >= 35); // Lower capacity constraint
assert(__count_18_17 <= 35); // Upper capacity constraint
assert(__count_18_19 >= 15); // Lower capacity constraint
assert(__count_18_19 <= 15); // Upper capacity constraint
assert(__count_36 > 0 ==> __count_9_13 > 0); // Mutual inclusion
assert(__count_9_13 > 0 ==> __count_36 > 0); // Mutual inclusion
assert(__count_36 > 0 ==> __count_12_11 > 0); // Mutual inclusion
assert(__count_12_11 > 0 ==> __count_36 > 0); // Mutual inclusion
assert(__count_36 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_36 > 0); // Mutual inclusion
assert(__count_36 > 0 ==> __count_14_15 > 0); // Mutual inclusion
assert(__count_14_15 > 0 ==> __count_36 > 0); // Mutual inclusion
assert(__count_36 > 0 ==> __count_18_17 > 0); // Mutual inclusion
assert(__count_18_17 > 0 ==> __count_36 > 0); // Mutual inclusion
assert(__count_36 > 0 ==> __count_18_19 > 0); // Mutual inclusion
assert(__count_18_19 > 0 ==> __count_36 > 0); // Mutual inclusion
assert(__count_36 > 0 ==> __count_26_25 > 0); // Mutual inclusion
assert(__count_26_25 > 0 ==> __count_36 > 0); // Mutual inclusion
assert(__count_36 > 0 ==> __count_26_27 > 0); // Mutual inclusion
assert(__count_26_27 > 0 ==> __count_36 > 0); // Mutual inclusion
assert(__count_36 > 0 ==> __count_32_33 > 0); // Mutual inclusion
assert(__count_32_33 > 0 ==> __count_36 > 0); // Mutual inclusion
assert(__count_36 > 0 ==> __count_32_31 > 0); // Mutual inclusion
assert(__count_32_31 > 0 ==> __count_36 > 0); // Mutual inclusion
assert(__count_36 > 0 ==> __count_34_35 > 0); // Mutual inclusion
assert(__count_34_35 > 0 ==> __count_36 > 0); // Mutual inclusion
assert(__count_9_13 > 0 ==> __count_12_11 > 0); // Mutual inclusion
assert(__count_12_11 > 0 ==> __count_9_13 > 0); // Mutual inclusion
assert(__count_9_13 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_9_13 > 0); // Mutual inclusion
assert(__count_9_13 > 0 ==> __count_14_15 > 0); // Mutual inclusion
assert(__count_14_15 > 0 ==> __count_9_13 > 0); // Mutual inclusion
assert(__count_9_13 > 0 ==> __count_18_17 > 0); // Mutual inclusion
assert(__count_18_17 > 0 ==> __count_9_13 > 0); // Mutual inclusion
assert(__count_9_13 > 0 ==> __count_18_19 > 0); // Mutual inclusion
assert(__count_18_19 > 0 ==> __count_9_13 > 0); // Mutual inclusion
assert(__count_9_13 > 0 ==> __count_34_35 > 0); // Mutual inclusion
assert(__count_34_35 > 0 ==> __count_9_13 > 0); // Mutual inclusion
assert(__count_12_11 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_12_11 > 0); // Mutual inclusion
assert(__count_12_11 > 0 ==> __count_14_15 > 0); // Mutual inclusion
assert(__count_14_15 > 0 ==> __count_12_11 > 0); // Mutual inclusion
assert(__count_12_11 > 0 ==> __count_18_17 > 0); // Mutual inclusion
assert(__count_18_17 > 0 ==> __count_12_11 > 0); // Mutual inclusion
assert(__count_12_11 > 0 ==> __count_18_19 > 0); // Mutual inclusion
assert(__count_18_19 > 0 ==> __count_12_11 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_14_15 > 0); // Mutual inclusion
assert(__count_14_15 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_18_17 > 0); // Mutual inclusion
assert(__count_18_17 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_18_19 > 0); // Mutual inclusion
assert(__count_18_19 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_14_15 > 0 ==> __count_18_17 > 0); // Mutual inclusion
assert(__count_18_17 > 0 ==> __count_14_15 > 0); // Mutual inclusion
assert(__count_14_15 > 0 ==> __count_18_19 > 0); // Mutual inclusion
assert(__count_18_19 > 0 ==> __count_14_15 > 0); // Mutual inclusion
assert(__count_18_17 > 0 ==> __count_18_19 > 0); // Mutual inclusion
assert(__count_18_19 > 0 ==> __count_18_17 > 0); // Mutual inclusion
assert(__count_26_25 > 0 ==> __count_9_13 > 0); // Mutual inclusion
assert(__count_9_13 > 0 ==> __count_26_25 > 0); // Mutual inclusion
assert(__count_26_25 > 0 ==> __count_12_11 > 0); // Mutual inclusion
assert(__count_12_11 > 0 ==> __count_26_25 > 0); // Mutual inclusion
assert(__count_26_25 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_26_25 > 0); // Mutual inclusion
assert(__count_26_25 > 0 ==> __count_14_15 > 0); // Mutual inclusion
assert(__count_14_15 > 0 ==> __count_26_25 > 0); // Mutual inclusion
assert(__count_26_25 > 0 ==> __count_18_17 > 0); // Mutual inclusion
assert(__count_18_17 > 0 ==> __count_26_25 > 0); // Mutual inclusion
assert(__count_26_25 > 0 ==> __count_18_19 > 0); // Mutual inclusion
assert(__count_18_19 > 0 ==> __count_26_25 > 0); // Mutual inclusion
assert(__count_26_25 > 0 ==> __count_32_33 > 0); // Mutual inclusion
assert(__count_32_33 > 0 ==> __count_26_25 > 0); // Mutual inclusion
assert(__count_26_25 > 0 ==> __count_32_31 > 0); // Mutual inclusion
assert(__count_32_31 > 0 ==> __count_26_25 > 0); // Mutual inclusion
assert(__count_26_25 > 0 ==> __count_34_35 > 0); // Mutual inclusion
assert(__count_34_35 > 0 ==> __count_26_25 > 0); // Mutual inclusion
assert(__count_26_27 > 0 ==> __count_9_13 > 0); // Mutual inclusion
assert(__count_9_13 > 0 ==> __count_26_27 > 0); // Mutual inclusion
assert(__count_26_27 > 0 ==> __count_12_11 > 0); // Mutual inclusion
assert(__count_12_11 > 0 ==> __count_26_27 > 0); // Mutual inclusion
assert(__count_26_27 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_26_27 > 0); // Mutual inclusion
assert(__count_26_27 > 0 ==> __count_14_15 > 0); // Mutual inclusion
assert(__count_14_15 > 0 ==> __count_26_27 > 0); // Mutual inclusion
assert(__count_26_27 > 0 ==> __count_18_17 > 0); // Mutual inclusion
assert(__count_18_17 > 0 ==> __count_26_27 > 0); // Mutual inclusion
assert(__count_26_27 > 0 ==> __count_18_19 > 0); // Mutual inclusion
assert(__count_18_19 > 0 ==> __count_26_27 > 0); // Mutual inclusion
assert(__count_26_27 > 0 ==> __count_26_25 > 0); // Mutual inclusion
assert(__count_26_25 > 0 ==> __count_26_27 > 0); // Mutual inclusion
assert(__count_26_27 > 0 ==> __count_32_33 > 0); // Mutual inclusion
assert(__count_32_33 > 0 ==> __count_26_27 > 0); // Mutual inclusion
assert(__count_26_27 > 0 ==> __count_32_31 > 0); // Mutual inclusion
assert(__count_32_31 > 0 ==> __count_26_27 > 0); // Mutual inclusion
assert(__count_26_27 > 0 ==> __count_34_35 > 0); // Mutual inclusion
assert(__count_34_35 > 0 ==> __count_26_27 > 0); // Mutual inclusion
assert(__count_32_33 > 0 ==> __count_9_13 > 0); // Mutual inclusion
assert(__count_9_13 > 0 ==> __count_32_33 > 0); // Mutual inclusion
assert(__count_32_33 > 0 ==> __count_12_11 > 0); // Mutual inclusion
assert(__count_12_11 > 0 ==> __count_32_33 > 0); // Mutual inclusion
assert(__count_32_33 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_32_33 > 0); // Mutual inclusion
assert(__count_32_33 > 0 ==> __count_14_15 > 0); // Mutual inclusion
assert(__count_14_15 > 0 ==> __count_32_33 > 0); // Mutual inclusion
assert(__count_32_33 > 0 ==> __count_18_17 > 0); // Mutual inclusion
assert(__count_18_17 > 0 ==> __count_32_33 > 0); // Mutual inclusion
assert(__count_32_33 > 0 ==> __count_18_19 > 0); // Mutual inclusion
assert(__count_18_19 > 0 ==> __count_32_33 > 0); // Mutual inclusion
assert(__count_32_33 > 0 ==> __count_32_31 > 0); // Mutual inclusion
assert(__count_32_31 > 0 ==> __count_32_33 > 0); // Mutual inclusion
assert(__count_32_33 > 0 Found a solution with cost -960
Found no solution with cost -1050.0 .. -961.0

Success, time = 0.0
Found a solution with cost -244260

Success, time = 0.0
==> __count_34_35 > 0); // Mutual inclusion
assert(__count_34_35 > 0 ==> __count_32_33 > 0); // Mutual inclusion
assert(__count_32_31 > 0 ==> __count_9_13 > 0); // Mutual inclusion
assert(__count_9_13 > 0 ==> __count_32_31 > 0); // Mutual inclusion
assert(__count_32_31 > 0 ==> __count_12_11 > 0); // Mutual inclusion
assert(__count_12_11 > 0 ==> __count_32_31 > 0); // Mutual inclusion
assert(__count_32_31 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_32_31 > 0); // Mutual inclusion
assert(__count_32_31 > 0 ==> __count_14_15 > 0); // Mutual inclusion
assert(__count_14_15 > 0 ==> __count_32_31 > 0); // Mutual inclusion
assert(__count_32_31 > 0 ==> __count_18_17 > 0); // Mutual inclusion
assert(__count_18_17 > 0 ==> __count_32_31 > 0); // Mutual inclusion
assert(__count_32_31 > 0 ==> __count_18_19 > 0); // Mutual inclusion
assert(__count_18_19 > 0 ==> __count_32_31 > 0); // Mutual inclusion
assert(__count_32_31 > 0 ==> __count_34_35 > 0); // Mutual inclusion
assert(__count_34_35 > 0 ==> __count_32_31 > 0); // Mutual inclusion
assert(__count_34_35 > 0 ==> __count_12_11 > 0); // Mutual inclusion
assert(__count_12_11 > 0 ==> __count_34_35 > 0); // Mutual inclusion
assert(__count_34_35 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_34_35 > 0); // Mutual inclusion
assert(__count_34_35 > 0 ==> __count_14_15 > 0); // Mutual inclusion
assert(__count_14_15 > 0 ==> __count_34_35 > 0); // Mutual inclusion
assert(__count_34_35 > 0 ==> __count_18_17 > 0); // Mutual inclusion
assert(__count_18_17 > 0 ==> __count_34_35 > 0); // Mutual inclusion
assert(__count_34_35 > 0 ==> __count_18_19 > 0); // Mutual inclusion
assert(__count_18_19 > 0 ==> __count_34_35 > 0); // Mutual inclusion
assert(__count_1_3 > 0 ==> __count_36 > 0); // Execution dependence
assert(__count_2_3 > 0 ==> __count_36 > 0); // Execution dependence
assert(__count_6_7 > 0 ==> __count_36 > 0); // Execution dependence
assert(__count_6_7 > 0 ==> __count_9_13 > 0); // Execution dependence
assert(__count_6_7 > 0 ==> __count_12_11 > 0); // Execution dependence
assert(__count_6_7 > 0 ==> __count_12_13 > 0); // Execution dependence
assert(__count_6_7 > 0 ==> __count_14_15 > 0); // Execution dependence
assert(__count_6_7 > 0 ==> __count_18_17 > 0); // Execution dependence
assert(__count_6_7 > 0 ==> __count_18_19 > 0); // Execution dependence
#endif
****************************************************************************************************
FUNCTION 'fabs'
****************************************************************************************************
#ifdef CBMC
assert(__count_40 >= 1); // Lower capacity constraint
assert(__count_40 <= 1); // Upper capacity constraint
assert(__count_37_38 <= 1); // Upper capacity constraint
assert(__count_37_39 <= 1); // Upper capacity constraint
assert(__count_37_38 > 0 ==> __count_40 > 0); // Execution dependence
assert(__count_37_39 > 0 ==> __count_40 > 0); // Execution dependence
#endif
HWMT = 244260
Doing WCET calculation on fabs
ILP(vanilla):: WCET(fabs)=960 (SOLVE TIME=0.00353)
Running command 'jeclipse -b /home/adam/WCET/DaikonPathInformation/benchmarks/LUdecomposition.fabs.context2.cfg.ecl.extra -e "solve(WCET)."'
CLP(extra):: WCET(fabs)=960 (SOLVE TIME=0.82572)
Doing WCET calculation on ludecomposition
ILP(vanilla):: WCET(ludecomposition)=1020900 (SOLVE TIME=0.01416)
Running command 'jeclipse -b /home/adam/WCET/DaikonPathInformation/benchmarks/LUdecomposition.ludecomposition.context1.cfg.ecl.extra -e "solve(WCET)."'
CLP(extra):: WCET(ludecomposition)=244260 (SOLVE TIME=1.42638)
In ludecomposition...
...#CFG edges              = 49
...#monitored              = 15
...#mutual exclusion pairs = 0
...#mutual inclusion pairs = 66
...#execution dependencies = 9
...#never execute          = 3
...#always execute         = 12
In fabs...
...#CFG edges              = 5
...#monitored              = 3
...#mutual exclusion pairs = 0
...#mutual inclusion pairs = 0
...#execution dependencies = 2
...#never execute          = 0
...#always execute         = 1
...#TOTAL mutual exclusion pairs = 0
...#TOTAL mutual inclusion pairs = 66
...#TOTAL execution dependencies = 11
...#TOTAL never execute          = 13
...#TOTAL always execute         = 13
============================================================
0:12:59.260 - End Program
Elapsed time: 0:12:59.240
============================================================

