============================================================
0:00:00.020 - Start Program
============================================================

********** Analysing program 'fft' **********
Checking program configuration...
============================================================
0:00:00.030 - COMPILING BEGIN
============================================================

============================================================
0:00:00.090 - COMPILING END
============================================================

...all good
============================================================
0:00:00.100 - TRACE PARSING RUN #1 (NO INLINING)
============================================================

Parsing gem5 traces
==========> cos : header 1
int __count_2 = 0;
int __count_1_2 = 0;
==========> fft : header 19
int __count_19_18 = 0;
int __count_19_18 = 0; //Loop counter
==========> fft : header 30
int __count_30_29 = 0;
int __count_30_29 = 0; //Loop counter
==========> fft : header 21
int __count_19_20 = 0;
int __count_21_15 = 0; //Loop counter
==========> fft : header 32
int __count_25_26 = 0;
int __count_25_27 = 0;
int __count_32_25 = 0; //Loop counter
==========> fft : header 23
int __count_21_22 = 0;
int __count_23_14 = 0; //Loop counter
==========> fft : header 9
int __count_9_8 = 0;
int __count_9_8 = 0; //Loop counter
==========> fft : header 37
int __count_37_36 = 0;
int __count_37_36 = 0; //Loop counter
==========> fft : header 3
int __count_39 = 0;
int __count_4_39 = 0;
int __count_11_13 = 0;
int __count_12_13 = 0;
int __count_33_34 = 0;
int __count_37_38 = 0;
==========> sin : header 48
int __count_48_49 = 0;
int __count_48_49 = 0; //Loop counter
==========> sin : header 45
int __count_45_44 = 0;
int __count_45_44 = 0; //Loop counter
==========> sin : header 42
int __count_42_41 = 0;
int __count_42_41 = 0; //Loop counter
==========> sin : header 40
int __count_50 = 0;
int __count_42_43 = 0;
==========> fabs : header 51
int __count_54 = 0;
int __count_51_52 = 0;
int __count_51_53 = 0;
==========> log : header 55
int __count_55 = 0;
****************************************************************************************************
FUNCTION 'cos'
****************************************************************************************************
  IGNORING MUTUAL INCLUSION: 2 and (1, 2)
****************************************************************************************************
FUNCTION 'fft'
****************************************************************************************************
  IGNORING MUTUAL INCLUSION: 39 and (9, 8)
  IGNORING MUTUAL INCLUSION: 39 and (19, 18)
  IGNORING MUTUAL INCLUSION: 39 and (19, 20)
  IGNORING MUTUAL INCLUSION: 39 and (21, 22)
  IGNORING MUTUAL INCLUSION: (9, 8) and (19, 18)
  IGNORING MUTUAL INCLUSION: (9, 8) and (19, 20)
  IGNORING MUTUAL INCLUSION: (9, 8) and (21, 22)
  IGNORING MUTUAL INCLUSION: (19, 18) and (19, 20)
  IGNORING MUTUAL INCLUSION: (19, 18) and (21, 22)
  IGNORING MUTUAL INCLUSION: (19, 20) and (21, 22)
  IGNORING MUTUAL INCLUSION: (25, 26) and 39
  IGNORING MUTUAL INCLUSION: (25, 26) and (9, 8)
  IGNORING MUTUAL INCLUSION: (25, 26) and (19, 18)
  IGNORING MUTUAL INCLUSION: (25, 26) and (19, 20)
  IGNORING MUTUAL INCLUSION: (25, 26) and (21, 22)
  IGNORING MUTUAL INCLUSION: (25, 26) and (25, 27)
  IGNORING MUTUAL INCLUSION: (25, 26) and (30, 29)
  IGNORING MUTUAL INCLUSION: (25, 27) and 39
  IGNORING MUTUAL INCLUSION: (25, 27) and (9, 8)
  IGNORING MUTUAL INCLUSION: (25, 27) and (19, 18)
  IGNORING MUTUAL INCLUSION: (25, 27) and (19, 20)
  IGNORING MUTUAL INCLUSION: (25, 27) and (21, 22)
  IGNORING MUTUAL INCLUSION: (25, 27) and (30, 29)
  IGNORING MUTUAL INCLUSION: (30, 29) and 39
  IGNORING MUTUAL INCLUSION: (30, 29) and (9, 8)
  IGNORING MUTUAL INCLUSION: (30, 29) and (19, 18)
  IGNORING MUTUAL INCLUSION: (30, 29) and (19, 20)
  IGNORING MUTUAL INCLUSION: (30, 29) and (21, 22)
  IGNORING MUTUAL INCLUSION BECAUSE OF DEAD CODE: (4, 39) and 39
****************************************************************************************************
FUNCTION 'sin'
****************************************************************************************************
  IGNORING MUTUAL INCLUSION: (48, 49) and (42, 43)
  IGNORING MUTUAL INCLUSION: 50 and (42, 43)
  IGNORING MUTUAL INCLUSION: 50 and (48, 49)
  IGNORING MUTUAL INCLUSION BECAUSE OF DEAD CODE: (42, 41) and (42, 43)
  IGNORING MUTUAL INCLUSION BECAUSE OF DEAD CODE: (42, 41) and (45, 44)
  IGNORING MUTUAL INCLUSION BECAUSE OF DEAD CODE: (42, 41) and 50
  IGNORING MUTUAL INCLUSION BECAUSE OF DEAD CODE: (42, 41) and (48, 49)
  IGNORING MUTUAL INCLUSION BECAUSE OF DEAD CODE: (45, 44) and (48, 49)
  IGNORING MUTUAL INCLUSION BECAUSE OF DEAD CODE: (45, 44) and 50
  IGNORING MUTUAL INCLUSION BECAUSE OF DEAD CODE: (45, 44) and (42, 43)
****************************************************************************************************
FUNCTION 'fabs'
****************************************************************************************************
****************************************************************************************************
FUNCTION 'log'
****************************************************************************************************
****************************************************************************************************
FUNCTION 'cos'
****************************************************************************************************
  ALWAYS EXECUTES: 2, at least 1 time(s), at most 1 time(s)
  ALWAYS EXECUTES: (1, 2), at least 1 time(s), at most 1 time(s)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
****************************************************************************************************
FUNCTION 'fft'
****************************************************************************************************
  ALWAYS EXECUTES: (25, 26), at least 2 time(s), at most 2 time(s)
  ALWAYS EXECUTES: (25, 27), at least 5 time(s), at most 5 time(s)
  ALWAYS EXECUTES: (30, 29), at least 4 time(s), at most 4 time(s)
  MAY EXECUTE: (37, 38), at most 1 time(s)
  ALWAYS EXECUTES: 39, at least 1 time(s), at most 1 time(s)
  MAY EXECUTE: (37, 36), at most 8 time(s)
  MAY EXECUTE: (33, 34), at most 1 time(s)
  ALWAYS EXECUTES: (9, 8), at least 1 time(s), at most 1 time(s)
  MAY EXECUTE: (11, 13), at most 1 time(s)
  MAY EXECUTE: (12, 13), at most 1 time(s)
  ALWAYS EXECUTES: (19, 18), at least 4 time(s), at most 4 time(s)
  ALWAYS EXECUTES: (19, 20), at least 4 time(s), at most 4 time(s)
  ALWAYS EXECUTES: (21, 22), at least 1 time(s), at most 1 time(s)
  NEVER EXECUTES: (4, 39)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
  MUTUALLY INCLUSIVE: (33, 34) and (12, 13)
  MUTUALLY INCLUSIVE: (37, 36) and (11, 13)
  MUTUALLY INCLUSIVE: (37, 38) and (11, 13)
  MUTUALLY INCLUSIVE: (37, 38) and (37, 36)
  MUTUALLY EXCLUSIVE: (33, 34) and (11, 13)
  MUTUALLY EXCLUSIVE: (37, 36) and (12, 13)
  MUTUALLY EXCLUSIVE: (37, 38) and (12, 13)
  ONE-WAY DEPENDENCY: (11, 13) on 39
  ONE-WAY DEPENDENCY: (11, 13) on (9, 8)
  ONE-WAY DEPENDENCY: (11, 13) on (19, 18)
  ONE-WAY DEPENDENCY: (11, 13) on (19, 20)
  ONE-WAY DEPENDENCY: (11, 13) on (21, 22)
  ONE-WAY DEPENDENCY: (11, 13) on (25, 26)
  ONE-WAY DEPENDENCY: (11, 13) on (25, 27)
  ONE-WAY DEPENDENCY: (11, 13) on (30, 29)
  ONE-WAY DEPENDENCY: (12, 13) on 39
  ONE-WAY DEPENDENCY: (12, 13) on (9, 8)
  ONE-WAY DEPENDENCY: (12, 13) on (19, 18)
  ONE-WAY DEPENDENCY: (12, 13) on (19, 20)
  ONE-WAY DEPENDENCY: (12, 13) on (21, 22)
  ONE-WAY DEPENDENCY: (12, 13) on (25, 26)
  ONE-WAY DEPENDENCY: (12, 13) on (25, 27)
  ONE-WAY DEPENDENCY: (12, 13) on (30, 29)
  ONE-WAY DEPENDENCY: (33, 34) on 39
  ONE-WAY DEPENDENCY: (33, 34) on (9, 8)
  ONE-WAY DEPENDENCY: (33, 34) on (19, 18)
  ONE-WAY DEPENDENCY: (33, 34) on (19, 20)
  ONE-WAY DEPENDENCY: (33, 34) on (21, 22)
  ONE-WAY DEPENDENCY: (33, 34) on (25, 26)
  ONE-WAY DEPENDENCY: (33, 34) on (25, 27)
  ONE-WAY DEPENDENCY: (33, 34) on (30, 29)
  ONE-WAY DEPENDENCY: (37, 36) on 39
  ONE-WAY DEPENDENCY: (37, 36) on (9, 8)
  ONE-WAY DEPENDENCY: (37, 36) on (19, 18)
  ONE-WAY DEPENDENCY: (37, 36) on (19, 20)
  ONE-WAY DEPENDENCY: (37, 36) on (21, 22)
  ONE-WAY DEPENDENCY: (37, 36) on (25, 26)
  ONE-WAY DEPENDENCY: (37, 36) on (25, 27)
  ONE-WAY DEPENDENCY: (37, 36) on (30, 29)
  ONE-WAY DEPENDENCY: (37, 38) on 39
  ONE-WAY DEPENDENCY: (37, 38) on (9, 8)
  ONE-WAY DEPENDENCY: (37, 38) on (19, 18)
  ONE-WAY DEPENDENCY: (37, 38) on (19, 20)
  ONE-WAY DEPENDENCY: (37, 38) on (21, 22)
  ONE-WAY DEPENDENCY: (37, 38) on (25, 26)
  ONE-WAY DEPENDENCY: (37, 38) on (25, 27)
  ONE-WAY DEPENDENCY: (37, 38) on (30, 29)
****************************************************************************************************
FUNCTION 'sin'
****************************************************************************************************
  NEVER EXECUTES: (42, 41)
  ALWAYS EXECUTES: 50, at least 1 time(s), at most 1 time(s)
  ALWAYS EXECUTES: (48, 49), at least 1 time(s), at most 7 time(s)
  ALWAYS EXECUTES: (42, 43), at least 1 time(s), at most 1 time(s)
  NEVER EXECUTES: (45, 44)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
****************************************************************************************************
FUNCTION 'fabs'
****************************************************************************************************
  MAY EXECUTE: (51, 52), at most 1 time(s)
  MAY EXECUTE: (51, 53), at most 1 time(s)
  ALWAYS EXECUTES: 54, at least 1 time(s), at most 1 time(s)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
  ONE-WAY DEPENDENCY: (51, 52) on 54
  ONE-WAY DEPENDENCY: (51, 53) on 54
****************************************************************************************************
FUNCTION 'log'
****************************************************************************************************
  ALWAYS EXECUTES: 55, at least 1 time(s), at most 1 time(s)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
****************************************************************************************************
FUNCTION 'cos'
****************************************************************************************************
#ifdef CBMC
assert(__count_2 >= 1); // Lower capacity constraint
assert(__count_2 <= 1); // Upper capacity constraint
assert(__count_1_2 >= 1); // Lower capacity constraint
assert(__count_1_2 <= 1); // Upper capacity constraint
#endif
****************************************************************************************************
FUNCTION 'fft'
****************************************************************************************************
#ifdef CBMC
assert(__count_19_18  <= 2); // Loop counter property
assert(__count_21_15  <= 5); // Loop counter property
assert(__count_37_36  <= 9); // Loop counter property
assert(__count_30_29  <= 3); // Loop counter property
assert(__count_32_25  <= 8); // Loop counter property
assert(__count_23_14  <= 2); // Loop counter property
assert(__count_9_8  <= 2); // Loop counter property
assert(__count_25_26 >= 2); // Lower capacity constraint
assert(__count_25_26 <= 2); // Upper capacity constraint
assert(__count_25_27 >= 5); // Lower capacity constraint
assert(__count_25_27 <= 5); // Upper capacity constraint
assert(__count_30_29 >= 4); // Lower capacity constraint
assert(__count_30_29 <= 4); // Upper capacity constraint
assert(__count_37_38 <= 1); // Upper capacity constraint
assert(__count_39 >= 1); // Lower capacity constraint
assert(__count_39 <= 1); // Upper capacity constraint
assert(__count_37_36 <= 8); // Upper capacity constraint
assert(__count_33_34 <= 1); // Upper capacity constraint
assert(__count_9_8 >= 1); // Lower capacity constraint
assert(__count_9_8 <= 1); // Upper capacity constraint
assert(__count_11_13 <= 1); // Upper capacity constraint
assert(__count_12_13 <= 1); // Upper capacity constraint
assert(__count_19_18 >= 4); // Lower capacity constraint
assert(__count_19_18 <= 4); // Upper capacity constraint
assert(__count_19_20 >= 4); // Lower capacity constraint
assert(__count_19_20 <= 4); // Upper capacity constraint
assert(__count_21_22 >= 1); // Lower capacity constraint
assert(__count_21_22 <= 1); // Upper capacity constraint
assert(__count_4_39 == 0); // Dead code
assert(__count_33_34 > 0 ==> __count_12_13 > 0); // Mutual inclusion
assert(__count_12_13 > 0 ==> __count_33_34 > 0); // Mutual inclusion
assert(__count_37_36 > 0 ==> __count_11_13 > 0); // Mutual inclusion
assert(__count_11_13 > 0 ==> __count_37_36 > 0); // Mutual inclusion
assert(__count_37_38 > 0 ==> __count_11_13 > 0); // Mutual inclusion
assert(__count_11_13 > 0 ==> __count_37_38 > 0); // Mutual inclusion
assert(__count_37_38 > 0 ==> __count_37_36 > 0); // Mutual inclusion
assert(__count_37_36 > 0 ==> __count_37_38 > 0); // Mutual inclusion
assert(__count_33_34 > 0 ==> __count_11_13 == 0); // Mutual exclusion
assert(__count_11_13 > 0 ==> __count_33_34 == 0); // Mutual exclusion
assert(__count_37_36 > 0 ==> __count_12_13 == 0); // Mutual exclusion
assert(__count_12_13 > 0 ==> __count_37_36 == 0); // Mutual exclusion
assert(__count_37_38 > 0 ==> __count_12_13 == 0); // Mutual exclusion
assert(__count_12_13 > 0 ==> __count_37_38 == 0); // Mutual exclusion
assert(__count_11_13 > 0 ==> __count_39 > 0); // Execution dependence
assert(__count_11_13 > 0 ==> __count_9_8 > 0); // Execution dependence
assert(__count_11_13 > 0 ==> __count_19_18 > 0); // Execution dependence
assert(__count_11_13 > 0 ==> __count_19_20 > 0); // Execution dependence
assert(__count_11_13 > 0 ==> __count_21_22 > 0); // Execution dependence
assert(__count_11_13 > 0 ==> __count_25_26 > 0); // Execution dependence
assert(__count_11_13 > 0 ==> __count_25_27 > 0); // Execution dependence
assert(__count_11_13 > 0 ==> __count_30_29 > 0); // Execution dependence
assert(__count_12_13 > 0 ==> __count_39 > 0); // Execution dependence
assert(__count_12_13 > 0 ==> __count_9_8 > 0); // Execution dependence
assert(__count_12_13 > 0 ==> __count_19_18 > 0); // Execution dependence
assert(__count_12_13 > 0 ==> __count_19_20 > 0); // Execution dependence
assert(__count_12_13 > 0 ==> __count_21_22 > 0); // Execution dependence
assert(__count_12_13 > 0 ==> __count_25_26 > 0); // Execution dependence
assert(__count_12_13 > 0 ==> __count_25_27 > 0); // Execution dependence
assert(__count_12_13 > 0 ==> __count_30_29 > 0); // Execution dependence
assert(__count_33_34 > 0 ==> __count_39 > 0); // Execution dependence
assert(__count_33_34 > 0 ==> __count_9_8 > 0); // Execution dependence
assert(__count_33_34 > 0 ==> __count_19_18 > 0); // Execution dependence
assert(__count_33_34 > 0 ==> __count_19_20 > 0); // Execution dependence
assert(__count_33_34 > 0 ==> __count_21_22 > 0); // Execution dependence
assert(__count_33_34 > 0 ==> __count_25_26 > 0); // Execution dependence
assert(__count_33_34 > 0 ==> __count_25_27 > 0); // Execution dependence
assert(__count_33_34 > 0 ==> __count_30_29 > 0); // Execution dependence
assert(__count_37_36 > 0 ==> __count_39 > 0); // Execution dependence
assert(__count_37_36 > 0 ==> __count_9_8 > 0); // Execution dependence
assert(__count_37_36 > 0 ==> __count_19_18 > 0); // Execution dependence
assert(__count_37_36 > 0 ==> __count_19_20 > 0); // Execution dependence
assert(__count_37_36 > 0 ==> __count_21_22 > 0); // Execution dependence
assert(__count_37_36 > 0 ==> __count_25_26 > 0); // Execution dependence
assert(__count_37_36 > 0 ==> __count_25_27 > 0); // Execution dependence
assert(__count_37_36 > 0 ==> __count_30_29 > 0); // Execution dependence
assert(__count_37_38 > 0 ==> __count_39 > 0); // Execution dependence
assert(__count_37_38 > 0 ==> __count_9_8 > 0); // Execution dependence
assert(__count_37_38 > 0 ==> __count_19_18 > 0); // Execution dependence
assert(__count_37_38 > 0 ==> __count_19_20 > 0); // Execution dependence
assert(__count_37_38 > 0 ==> __count_21_22 > 0); // Execution dependeFound a solution with cost -960
Found no solution with cost -1050.0 .. -961.0

Success, time = 0.0
Found a solution with cost -960
Found no solution with cost -1050.0 .. -961.0

Success, time = 0.0
Found a solution with cost -242850
Found no solution with cost -243030.0 .. -242851.0

Success, time = 0.01
nce
assert(__count_37_38 > 0 ==> __count_25_26 > 0); // Execution dependence
assert(__count_37_38 > 0 ==> __count_25_27 > 0); // Execution dependence
assert(__count_37_38 > 0 ==> __count_30_29 > 0); // Execution dependence
#endif
****************************************************************************************************
FUNCTION 'sin'
****************************************************************************************************
#ifdef CBMC
assert(__count_48_49  <= 8); // Loop counter property
assert(__count_45_44  <= 1); // Loop counter property
assert(__count_42_41  <= 1); // Loop counter property
assert(__count_42_41 == 0); // Dead code
assert(__count_50 >= 1); // Lower capacity constraint
assert(__count_50 <= 1); // Upper capacity constraint
assert(__count_48_49 >= 1); // Lower capacity constraint
assert(__count_48_49 <= 7); // Upper capacity constraint
assert(__count_42_43 >= 1); // Lower capacity constraint
assert(__count_42_43 <= 1); // Upper capacity constraint
assert(__count_45_44 == 0); // Dead code
#endif
****************************************************************************************************
FUNCTION 'fabs'
****************************************************************************************************
#ifdef CBMC
assert(__count_51_52 <= 1); // Upper capacity constraint
assert(__count_51_53 <= 1); // Upper capacity constraint
assert(__count_54 >= 1); // Lower capacity constraint
assert(__count_54 <= 1); // Upper capacity constraint
assert(__count_51_52 > 0 ==> __count_54 > 0); // Execution dependence
assert(__count_51_53 > 0 ==> __count_54 > 0); // Execution dependence
#endif
****************************************************************************************************
FUNCTION 'log'
****************************************************************************************************
#ifdef CBMC
assert(__count_55 >= 1); // Lower capacity constraint
assert(__count_55 <= 1); // Upper capacity constraint
#endif
HWMT = 172620
Doing WCET calculation on log
ILP(vanilla):: WCET(log)=510 (SOLVE TIME=0.00336)
ILP(extra):: WCET(log)=510 (SOLVE TIME=0.00287)
Doing WCET calculation on log
ILP(vanilla):: WCET(log)=510 (SOLVE TIME=0.00285)
ILP(extra):: WCET(log)=510 (SOLVE TIME=0.00284)
Doing WCET calculation on fabs
ILP(vanilla):: WCET(fabs)=960 (SOLVE TIME=0.00297)
Running command 'jeclipse -b /home/adam/WCET/DaikonPathInformation/benchmarks/fft.fabs.context8.cfg.ecl.extra -e "solve(WCET)."'
CLP(extra):: WCET(fabs)=960 (SOLVE TIME=0.38401)
Doing WCET calculation on sin
ILP(vanilla):: WCET(sin)=25410 (SOLVE TIME=0.00377)
ILP(extra):: WCET(sin)=21780 (SOLVE TIME=0.00338)
Doing WCET calculation on cos
ILP(vanilla):: WCET(cos)=26310 (SOLVE TIME=0.00292)
ILP(extra):: WCET(cos)=22680 (SOLVE TIME=0.00293)
Doing WCET calculation on fabs
ILP(vanilla):: WCET(fabs)=960 (SOLVE TIME=0.00302)
Running command 'jeclipse -b /home/adam/WCET/DaikonPathInformation/benchmarks/fft.fabs.context7.cfg.ecl.extra -e "solve(WCET)."'
CLP(extra):: WCET(fabs)=960 (SOLVE TIME=0.37661)
Doing WCET calculation on sin
ILP(vanilla):: WCET(sin)=25410 (SOLVE TIME=0.00368)
ILP(extra):: WCET(sin)=21780 (SOLVE TIME=0.00328)
Doing WCET calculation on fft
ILP(vanilla):: WCET(fft)=703950 (SOLVE TIME=0.00498)
Running command 'jeclipse -b /home/adam/WCET/DaikonPathInformation/benchmarks/fft.fft.context1.cfg.ecl.extra -e "solve(WCET)."'
CLP(extra):: WCET(fft)=242850 (SOLVE TIME=0.47686)
In cos...
...#CFG edges              = 2
...#monitored              = 2
...#mutual exclusion pairs = 0
...#mutual inclusion pairs = 0
...#execution dependencies = 0
...#never execute          = 0
...#always execute         = 2
In fft...
...#CFG edges              = 47
...#monitored              = 14
...#mutual exclusion pairs = 3
...#mutual inclusion pairs = 4
...#execution dependencies = 40
...#never execute          = 1
...#always execute         = 8
In sin...
...#CFG edges              = 14
...#monitored              = 5
...#mutual exclusion pairs = 0
...#mutual inclusion pairs = 0
...#execution dependencies = 0
...#never execute          = 2
...#always execute         = 3
In fabs...
...#CFG edges              = 5
...#monitored              = 3
...#mutual exclusion pairs = 0
...#mutual inclusion pairs = 0
...#execution dependencies = 2
...#never execute          = 0
...#always execute         = 1
In log...
...#CFG edges              = 1
...#monitored              = 1
...#mutual exclusion pairs = 0
...#mutual inclusion pairs = 0
...#execution dependencies = 0
...#never execute          = 0
...#always execute         = 1
...#TOTAL mutual exclusion pairs = 3
...#TOTAL mutual inclusion pairs = 4
...#TOTAL execution dependencies = 42
...#TOTAL never execute          = 15
...#TOTAL always execute         = 15
============================================================
0:17:17.550 - End Program
Elapsed time: 0:17:17.530
============================================================

