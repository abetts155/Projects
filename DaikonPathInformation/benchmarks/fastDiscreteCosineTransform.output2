Found a solution with cost -252300

Success, time = 0.0
============================================================
0:00:00.010 - Start Program
============================================================

********** Analysing program 'fastDiscreteCosineTransform' **********
Checking program configuration...
============================================================
0:00:00.030 - COMPILING BEGIN
============================================================

============================================================
0:00:00.100 - COMPILING END
============================================================

...all good
============================================================
0:00:00.110 - TRACE PARSING RUN #1 (NO INLINING)
============================================================

Parsing gem5 traces
==========> fastdiscretecosinetransform : header 6
int __count_6_5 = 0;
int __count_6_5 = 0; //Loop counter
==========> fastdiscretecosinetransform : header 3
int __count_3_2 = 0;
int __count_3_2 = 0; //Loop counter
==========> fastdiscretecosinetransform : header 1
int __count_7 = 0;
int __count_3_4 = 0;
****************************************************************************************************
FUNCTION 'fastdiscretecosinetransform'
****************************************************************************************************
  ALWAYS EXECUTES: (3, 2), at least 8 time(s), at most 8 time(s)
  ALWAYS EXECUTES: (3, 4), at least 1 time(s), at most 1 time(s)
  ALWAYS EXECUTES: (6, 5), at least 8 time(s), at most 8 time(s)
  ALWAYS EXECUTES: 7, at least 1 time(s), at most 1 time(s)
--------------------------------------------------
DEPENDENT EXECUTION CONJECTURES
--------------------------------------------------
  MUTUALLY INCLUSIVE: (3, 2) and 7
  MUTUALLY INCLUSIVE: (3, 2) and (3, 4)
  MUTUALLY INCLUSIVE: (3, 2) and (6, 5)
  MUTUALLY INCLUSIVE: (3, 4) and 7
  MUTUALLY INCLUSIVE: (3, 4) and (6, 5)
  MUTUALLY INCLUSIVE: (6, 5) and 7
****************************************************************************************************
FUNCTION 'fastdiscretecosinetransform'
****************************************************************************************************
#ifdef CBMC
assert(__count_6_5  <= 9); // Loop counter property
assert(__count_3_2  <= 9); // Loop counter property
assert(__count_3_2 >= 8); // Lower capacity constraint
assert(__count_3_2 <= 8); // Upper capacity constraint
assert(__count_3_4 >= 1); // Lower capacity constraint
assert(__count_3_4 <= 1); // Upper capacity constraint
assert(__count_6_5 >= 8); // Lower capacity constraint
assert(__count_6_5 <= 8); // Upper capacity constraint
assert(__count_7 >= 1); // Lower capacity constraint
assert(__count_7 <= 1); // Upper capacity constraint
assert(__count_3_2 > 0 ==> __count_7 > 0); // Mutual inclusion
assert(__count_7 > 0 ==> __count_3_2 > 0); // Mutual inclusion
assert(__count_3_2 > 0 ==> __count_3_4 > 0); // Mutual inclusion
assert(__count_3_4 > 0 ==> __count_3_2 > 0); // Mutual inclusion
assert(__count_3_2 > 0 ==> __count_6_5 > 0); // Mutual inclusion
assert(__count_6_5 > 0 ==> __count_3_2 > 0); // Mutual inclusion
assert(__count_3_4 > 0 ==> __count_7 > 0); // Mutual inclusion
assert(__count_7 > 0 ==> __count_3_4 > 0); // Mutual inclusion
assert(__count_3_4 > 0 ==> __count_6_5 > 0); // Mutual inclusion
assert(__count_6_5 > 0 ==> __count_3_4 > 0); // Mutual inclusion
assert(__count_6_5 > 0 ==> __count_7 > 0); // Mutual inclusion
assert(__count_7 > 0 ==> __count_6_5 > 0); // Mutual inclusion
#endif
HWMT = 252300
Doing WCET calculation on fastdiscretecosinetransform
ILP(vanilla):: WCET(fastdiscretecosinetransform)=283650 (SOLVE TIME=0.00371)
Running command 'jeclipse -b /home/adam/WCET/DaikonPathInformation/benchmarks/fastDiscreteCosineTransform.fastdiscretecosinetransform.context1.cfg.ecl.extra -e "solve(WCET)."'
CLP(extra):: WCET(fastdiscretecosinetransform)=252300 (SOLVE TIME=1.01822)
In fastdiscretecosinetransform...
...#CFG edges              = 9
...#monitored              = 4
...#mutual exclusion pairs = 0
...#mutual inclusion pairs = 6
...#execution dependencies = 0
...#never execute          = 0
...#always execute         = 4
...#TOTAL mutual exclusion pairs = 0
...#TOTAL mutual inclusion pairs = 6
...#TOTAL execution dependencies = 0
...#TOTAL never execute          = 4
...#TOTAL always execute         = 4
============================================================
0:16:51.840 - End Program
Elapsed time: 0:16:51.830
============================================================

