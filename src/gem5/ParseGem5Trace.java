package gem5;

import java.io.BufferedWriter;
import java.io.FileWriter;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

import tvgen.util.SystemOutput;

public class ParseGem5Trace {

	private static Options options;
	private static Option helpOption;
	private static Option debugOption;
	private static Option programOption;
	private static Option iprofileOption;
	private static Option traceFileOption;
	private static Option outputOption;
	private static Option appendOption;
	private static Option hexOption;
	
	private static void addOptions ()
	{
		options = new Options ();
		
		helpOption = new Option ("h", "help", false, "Display this message.");
		options.addOption (helpOption);
		
		debugOption = new Option ("d", "debug", false, "Debug mode.");
		options.addOption (debugOption);
		
		outputOption = new Option ("o", "output-file", true,
				"The output file to save the parsed trace to");
		outputOption.setRequired (false);
		options.addOption (outputOption);
		
		programOption = new Option ("p", "program", true,
				"The name of the program xml file");
		programOption.setRequired (true);
		options.addOption (programOption);
		
		iprofileOption = new Option ("i", "instrumentation", true,
				"The instrumentation level to use (BASIC_BLOCK or BRANCH)");
		iprofileOption.setRequired (true);
		options.addOption (iprofileOption);
		
		traceFileOption = new Option ("t", "trace-file", true,
				"The name of the trace file to be parsed");
		traceFileOption.setRequired (true);
		options.addOption (traceFileOption);
		
		appendOption = new Option ("a", "append", false, "Append to output file");
		options.addOption (appendOption);
		
		hexOption = new Option ("H", "hex-addrs", false, "Output addresses in hex");
		options.addOption (hexOption);
	}
	
	private static CommandLine parseCommandLine (String[] args)
	{
		final String toolName = "gem5-trace-parser.jar";
		CommandLineParser parser = new GnuParser ();
		HelpFormatter formatter = new HelpFormatter ();
		formatter.setWidth (80);
		CommandLine line = null;
		try
		{
			line = parser.parse (options, args);

			if (line.hasOption (helpOption.getOpt ()))
			{
				formatter.printHelp (toolName, options);
				System.exit (1);
			} 
			else
			{
				if (line.hasOption (debugOption.getOpt ()))
					SystemOutput.debugMode = true;
			}
		}
		catch (ParseException e)
		{
			System.out.println (e.getMessage ());
			formatter.printHelp (toolName, options);
			System.exit (1);
		}
		
		return line;
	}
	
	/**
	 * Parses the trace generated by gem5
	 * @param args
	 */
	public static void main(String[] args) {
		addOptions();
		CommandLine line = parseCommandLine(args);
		
		TraceParser parser = new TraceParser( line.getOptionValue(programOption.getOpt()) );
		
		String instrumentation = line.getOptionValue(iprofileOption.getOpt());
		String traceFile = line.getOptionValue(traceFileOption.getOpt());
		boolean hexAddrs = line.hasOption(hexOption.getOpt());
		
		String parsedString = parser.parseTrace(traceFile, instrumentation, hexAddrs);
		
		if( line.hasOption(outputOption.getOpt()) )
		{
			String outputFileName = line.getOptionValue(outputOption.getOpt());
			try
			{
				boolean append = line.hasOption(appendOption.getOpt());
				BufferedWriter out = new BufferedWriter(
						new FileWriter(outputFileName, append));
				out.write(parsedString);
			    out.close();
			}
			catch(Exception e)
			{
				SystemOutput.exitWithError("Error writing to file " + outputFileName);
			}
			
		}
		else
		{
			SystemOutput.debugMessage("No output file provided, printing to std out");
			SystemOutput.printMessage(parsedString);
		}
	}

}
